<?php


function latex_field_field_info() {
	return array(
	    'field_latex' => array(
			'label' => 'LaTeX field',
			'description' => 'LaTeX Field.',
			'default_widget' => 'latex_widget',
			'default_formatter' => 'latex_formatter',
			'settings' => array("filter" => "latex")
		),
	);
}

/**
* Implements hook_field_is_empty().
*/
function latex_field_field_is_empty($item, $field) {
	return empty($item['document']) && empty($item['preamble']) && empty($item['metadata']);
}


/**
 * Implements hook_field_formatter_info().
 */
function latex_field_field_formatter_info() {
	return array(
	// This formatter just displays the hex value in the color indicated.
    'latex_formatter' => array(
      'label' => t('Simple LaTeX formatter'),
      'field types' => array('field_latex'),
	),
	);
}

function latex_field_theme($existing, $type, $theme, $path) {
	return array(
		"localedit" => array(
 			'render element' => 'element', 
      		'template' => 'localedit',		
      	)
	);
}


/**
* Implements hook_field_formatter_view().
*
* Two formatters are implemented.
* - field_example_simple_text just outputs markup indicating the color that
*   was entered and uses an inline style to set the text color to that value.
* - field_example_color_background does the same but also changes the
*   background color of div.region-content.
*/
function latex_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  
	$element = array();

	switch ($display['type']) {
		// This formatter simply outputs the field as text and with a color.
		case 'latex_formatter':
			foreach ($items as $delta => $item) {
				$settings = $instance['widget']['settings'];
				$filter = $item['format'];
				global $latex_preamble;
				global $latex_metadata;
				$latex_preamble = $item['preamble']; 
				$latex_metadata = $item['metadata']; 
				//dd($filter, "sending stuff to filter");
				$fobj = check_markup($item['document'], $filter, $entity->language, true);
				//dd($fobj, "response from filter is");
				$element[$delta]['#markup'] = theme("localedit",
				array(
										"content" => $fobj, 
										"link" => url('<front>')."localedit/".$entity->nid."/".$field["field_name"]));
				
			}
			break;
	}

	return $element;
}


/**
* Implements hook_field_widget_info().
*
* Three widgets are provided.
* - A simple text-only widget where the user enters the '#ffffff'.
* - A 3-textfield widget that gathers the red, green, and blue values
*   separately.
* - A farbtastic colorpicker widget that chooses the value graphically.
*/
function latex_field_field_widget_info() {
	return array(
    'latex_widget' => array(
      'label' => t('LaTeX widget'),
      'field types' => array('field_latex'),
	),
	);
}


/**
* Implements hook_field_widget_form().
*
*/
function latex_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
	$settings = $instance['widget']['settings'];

	$code = isset($items[$delta]['document']) ? $items[$delta]['document'] : '';
	$preamble = isset($items[$delta]['preamble']) ? $items[$delta]['preamble'] : '';
	$metadata = isset($items[$delta]['metadata']) ? $items[$delta]['metadata'] : '';
	$format = isset($items[$delta]['format']) ? $items[$delta]['format'] : $settings["filter"];
	$element += array(
    '#delta' => $delta,
	);
	$element['preamble'] = array();
	$element['metadata'] = array();
	$element['document'] = array();
	$element['format'] = array();

	
	switch ($instance['widget']['type']) {

		case 'latex_widget':
			$element += array(
        		'#type' => 'fieldset',
        		'#element_validate' => array('latex_field_validate'),
				'#delta' => $delta,
			);
			
			// Would be nice to make this hide/show on demand
			$element['preamble'] += array(
				"#title" => "Preamble",
				"#type" => "textarea",
				"#default_value" => $preamble,
			);
			// try making this "hidden" instead of "textarea"
			// seems to work fine for display, let's see if it
			// also works for programmatic setting and getting
			// of values.  That didn't seem to lead to the results
			// we want -- nothing shows up!
			$element['metadata'] += array(
				"#title" => "Metadata",
				"#type" => "textarea",
				"#default_value" => $metadata,
			);
			$element['document'] += array(
				"#title" => "LaTeX",
				"#type" => "text_format",
				"#default_value" => $code,
				"#format" => $format,
			);
		break;
	}
	return $element;
}

// Is there a good way to make the metadata stuff run completely selectively?
function latex_field_validate($element, &$form_state) {
  $delta = $element['#delta']; 
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
  if (isset($form_state['values'][$field_name][$element['#language']][$delta])) {
    $values = $form_state['values'][$field_name][$element['#language']][$delta];
    form_set_value($element, array(
				   'document' => $values["document"]["value"], 
				   'value' => $values["document"]["value"], // just to make it work with wysiwyg
				   'preamble' => $values["preamble"],
				   'metadata' => $values["metadata"],
				   'format' => $values["document"]["format"]),
		   $form_state
   	);
  }
}

function latex_field_field_widget_settings_form($field, $instance) {
	$formats = array();
	foreach (filter_formats() as $id=>$obj) {
		$formats[$id] = $obj->name;
	}
	
	$settings = $field['settings'];
	$form['filter'] = array(
    '#type' => 'select', 
    '#title' => t('Filter to be used'), 
    '#default_value' => $settings['filter'],
    '#options' => $formats, 
    '#required' => FALSE, 
    '#description' => t('Please choose the filter to be used for the content.'),
	);
	return $form;
}

// Retrieve the user's preamble or site wide preamble, and populate the "preamble" 
// This seems to work fine, but it isn't going to be GENERAL unless we name
// the latex field in a consistent way.  OK, the function here now sorts out the
// naming concerns... and together with the corresponding JS (and removing the
// content-type-specific template files) this is ready to deploy.
function latex_field_form_alter(&$form, &$form_state, $form_id){

  global $user;

  //dd("THIS IS THE FORM ID");
  //dd($form_id);
  if ($form_id == 'article_node_form' 
      || $form_id == 'problem_node_form'
      || $form_id == 'solution_node_form'
      || $form_id == 'review_node_form' ){

    if($form_id == 'article_node_form') {
      $fieldname='field_latex';
    } else {
      preg_match("/(.*)_node_form/", $form_id, $matches);
      $fieldname='field_'.$matches[1].'_latex';
    }

    // THE NEXT THING IS TO BE SURE TO GET THE *LOCAL* PREAMBLE IN CASE IT EXISTS
    // AND USE THAT.  OF COURSE, THIS IS ONLY MEANINGFUL WHEN THE NID IS DEFINED
    // I.E. WHEN THE NODE IS NOT A NEW ONE. 
    $preamble='';
    // if we're revising a node, the local preamble has the precident
    if(isset($form['nid']['#value'])){
      $tablename='field_data_'.$fieldname;
      $columnname=$fieldname.'_preamble';

      if(db_table_exists($tablename)) {
        $preamble = db_query('SELECT '.$columnname.' AS preamble
    FROM '.$tablename.' 
    WHERE entity_id=' . $form['nid']['#value'])->fetchObject();
        $preamble = $preamble->preamble;
      }
    }
    // otherwise, the user preamble has next precident
    if(empty($preamble)){
      if(db_table_exists('field_data_field_user_preamble')) {
        $preamble = db_query('SELECT field_user_preamble_value AS preamble
    FROM field_data_field_user_preamble 
    WHERE entity_id=' . $user->uid)->fetchObject();
        $preamble = $preamble->preamble;
      }
    }
    // otherwise, we use the global preamble
    if (empty($preamble)) {
      $form[$fieldname]['und'][0]['preamble']['#default_value'] = '%SITEWIDE DEFAULT SHOULD GO HERE';
    } else {
      $form[$fieldname]['und'][0]['preamble']['#default_value']= $preamble;
    }

    // This code does work to insert the js, but we still need
    // some way to get the actual preamble inserted... but
    // that should now be done by the above.
    $path = drupal_get_path('theme','planetmath');
    dd('i am theming the latex_field...'.$path);
    drupal_add_js("$path/js/theme_latex_field.js");   
    dd('success');

  }
}

?>