<?php

include_once("tntbase_api.inc");

function tntbase_get($Host) {
  $User = variable_get('tntbase_username', '');
  $Pass = variable_get('tntbase_pass', '');

  return curli_GET($Host, $User, $Pass);
}

function tntbase_post($Data, $Host) {
  $User = variable_get('tntbase_username', '');
  $Pass = variable_get('tntbase_pass', '');

  return curli_POST($Data, $Host, $User, $Pass);
}

function tntbase_put($Data, $Host, $Header = array('Content-Type: text/xml')) {
  $User = variable_get('tntbase_username', '');
  $Pass = variable_get('tntbase_pass', '');

  return curli_PUT($Data, $Host, $Header, $User, $Pass);
}

function tntbase_putmpf($Data, $Host) {
  $User = variable_get('tntbase_username', '');
  $Pass = variable_get('tntbase_pass', '');

  return curli_PUT_MultipartFiles($Data, $Host, $User, $Pass);
}

function tntbase_delete($Host) {
  $User = variable_get('tntbase_username', '');
  $Pass = variable_get('tntbase_pass', '');

  return curli_DELETE($Host, $User, $Pass);
}

function tntbase_menu() {
  //create page where the paths can be configured
  $items = array();
  $items['admin/config/content/tntbase'] = array(
    'title' => 'TNTBase configuration',
    'description' => 'Configure the TNTBase URLs with which we will interact',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tntbase_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}


function tntbase_form($form, &$form_state) {
  $form['tntbase_stex'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use sTeX?'),
    '#default_value' => variable_get('tntbase_stex', 1),
    '#description' => t('Determine if we are using sTeX or normal LaTeX'),
  );

  $form['tntbase_fetch_source_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Repository source root URL'),
    '#default_value' => variable_get('tntbase_fetch_source_url', 'https://tnt.kwarc.info/repos/stc'),
    '#description' => t('The base URL to fetch the sources'),
  );

  $form['tntbase_fetch_presentation_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Repository presentation root URL'),
    '#default_value' => variable_get('tntbase_fetch_presentation_url', 'https://tnt.kwarc.info/repos/stc/restful/planet/children'),
    '#description' => t('The base URL to fetch the HTML'),
  );

  $form['tntbase_create_presentation_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL to transform OMDoc to XHTML'),
    '#default_value' => variable_get('tntbase_create_presentation_url', 'https://tnt.kwarc.info/repos/stc/restful/jomdoc/render'),
    '#description' => t('The URL to convert OMDoc to XHTML'),
  );

  $form['tnthbase_commit_files_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL to commit files to'),
    '#default_value' => variable_get('tntbase_commit_files_url', 'https://tnt.kwarc.info/tntbase/stc/restful/content/commit'),
    '#description' => t('The URL to convert the files to'),
  );

  $form['tntbase_commit_xml_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL to commit XML files (OMDoc) to'),
    '#default_value' => variable_get('tntbase_commit_xml_url' , 'https://tnt.kwarc.info/tntbase/stc/restful/content/doc'),
    '#description' => t('The URL to which OMDoc files should be committed in TNTBase'),
  );

  $form['tntbase_username'] = array(
    '#type' => 'textfield',
    '#title' => t('The username to log on to TNTBase'),
    '#default_value' => variable_get('tntbase_username' , 'planetarybroker'),
    '#description' => t('The username to log on to TNTBase'),
  );

  $form['tntbase_pass'] = array(
    '#type' => 'password',
    '#title' => t('The password to connect to TNTBase'),
    '#description' => t('The passowrd to connect to TNTBase'),
  );

  $form['tntbase_xquery_url'] = array(
    '#type' => 'textfield',
    '#title' => t('The URL in TNTBase to execute XQuery-s'),
    '#default_value' =>   variable_get('tntbase_xquery_url' , 'https://tnt.kwarc.info/tntbase/stc/restful/query'),
    '#description' => t('The URL in TNTBase to execute XQuery-s'),
  );

  $form['tntbase_document_names_url'] = array(
    '#type' => 'textfield',
    '#title' => t('The URL in TNTBase to retrieve document names'),
    '#default_value' =>   variable_get('tntbase_document_names_url' , 'https://tnt.kwarc.info/tntbase/stc/restful/names/getDocNames'),
    '#description' => t('The URL in TNTBase to retrieve document names'),
  );

  $form['tntbase_folder_contents_url'] = array(
    '#type' => 'textfield',
    '#title' => t('The URL in TNTBase to retrieve the contents of a TNTBase folder'),
    '#default_value' => variable_get('tntbase_folder_contents_url' , 'https://tnt.kwarc.info/tntbase/stc/restful/urlContent'),
    '#description' => t('The URL in TNTBase to retrieve the contents of a TNTBase folder'),
  );

  $form['tntbase_log_url'] = array(
    '#type' => 'textfield',
    '#title' => t('The URL in TNTBase to fetch the log'),
    '#default_value' => variable_get('tntbase_log_url' , 'https://tnt.kwarc.info/tntbase/stc/restful/util/log'),
    '#description' => t('The URL in TNTBase to fetch the log'),
  );

  $form['tntbase_file_revision_url'] = array(
    '#type' => 'textfield',
    '#title' => t('The URL in TNTBase to fetch the revision of a file path'),
    '#default_value' => variable_get('tntbase_file_revision_url' , 'https://tnt.kwarc.info/tntbase/stc/restful/util/file-revs'),
    '#description' => t('The URL in TNTBase to fetch the revision of a file path'),
  );

  $form['tntbase_latexml_url'] = array(
    '#type' => 'textfield',
    '#title' => t('The URL to transform LaTeX to HTML'),
    '#default_value' =>   variable_get('tntbase_latexml_url' , 'http://latexml.mathweb.org/convert'),
    '#description' => t('The URL to transform LaTeX to HTML'),
  );

  $form['tntbase_latexml_stex_url'] = array(
    '#type' => 'textfield',
    '#title' => t('The URL to transform sTeX to OMDoc'),
    '#default_value' =>   variable_get('tntbase_latexml_stex_url' , 'http://tex2xml.kwarc.info/test/ajax/convert_fragment_beta.php'),
    '#description' => t('The URL to transform sTeX to OMDoc'),
  );


  return system_settings_form($form);
}

function tntbase_help($path) {
  switch ($path) {
    case "admin/help#tntbase":
      return '<p>'.  t("Provides an API to communicate with TNTBase") .'</p>';
      break;
  }
}


/**
 * Method for importing the entire content under a specific
 * repository path
 * @param string $RootPath the path to the desired place of import
 * @return an array of associative arrays of (Body, BodyXHTML,
 * TitleXHTML, Revision, Path) to be considered as documents, or
 * <b>false</b> in case of an error
 */
function tntbase_import_repository($root_path) {
  $files = tntbase_get_document_names($root_path);
  if(false == $files) {
    return false;
  }
  $documents = array();
  foreach($files as $file_path) {
    //TODO: remove this hack
    $path_info = pathinfo($file_path);
    if($path_info['filename'] == 'dummy') {
      continue;
    }
    $document = tntbase_get_document($file_path);
    if(false == $document) {
      return false;
    }
    $documents[] = $document;
  }
  return $documents;
}

/**
 * Method used for retrieveing all of the relevant content for a set of documents
 * @param array $Documents the list of documents that need their content imported given as an array of paths to valid OMDOC documents in TNTBase
 * @return an array of associative arrays of (Body, BodyXHTML, TitleXHTML, Revision, Path) to be considered as documents, with <b>false</b> in case of an error
 */
function tntbase_import_documents($documents) {
  $all_content = array();
  foreach ($documents as $file_path) {
    $all_content[] = tntbase_get_document($file_path);
  }
  return $all_content;
}

/**
 * Method for getting all the revision numbers of a certain file when it was modified
 * @param string $FilePath the path into TNTBase of the file in question
 * @param bool $HeadOnly a flag to state if to get all of the revisions or just the head
 * @return an array of the revision numbers of a file in which it was modified, if they exist, <b>false</b> otherwise
 */
function tntbase_get_revisions($file_path, $revision = false) {
  $url = variable_get('tntbase_file_revision_url') . $file_path;
  if (false !== $revision) {
    $url .= "?$revision";
  }
  $response = tntbase_get($url);
  return $response;
}

/**
 * Method used to return the head revision number
 * @return int the head revision number or <b>false</b> in case of errors
 */
function tntbase_get_head_revision() {
  $response = tntbase_get(variable_get('tntbase_xquery_url') .
              '/tnt:last-revnum()');
  $response = tntbase_strip_tntbase_results($response);
  $response = $response[0];
  return $response;
}

/**
 * Method used to get the updated content that has grown out of sync with TNTBase
 * @param int $Revision the revision number from which to check for updates
 * @return an associative array of (A, D) going to arrays of paths to the OMDOC of the respectively Added or Deleted content or <b>false</b> if an error occurred
 */
function tntbase_get_content_changes($revision) {
  $head_revision = tntbase_get_head_revision();
  if (false == $head_revision || $revision > $head_revision) {
    return false;
  }

  $log = tntbase_get_log($revision, $head_revision);
  $a = $log['A'];
  $added = array();
  $d = $log['D'];
  $deleted = array();

  foreach ($a as $file) {
    $path_info = pathinfo($file);
    if ("tex" == $path_info['extension']) {
      $added[] = $path_info['dirname'] . '/' . $path_info['filename'] . '.omdoc';
    }
  }

  foreach ($d as $file) {
    $path_info = $pathinfo($file);
    if ("tex" == $path_info['extension']) {
      $deleted[] = $path_info['dirname'] . '/' . $path_info['filename'] . '.omdoc';
    }
  }

  $response = array('A' => $added, 'D' => $deleted);
  return $response;
}

/**
 * Method to be used to get the content of a file path, none recursively, for organizing content at a position
 * @param string $FilePath the path to look at
 * @return the contents of the path in a key=>value array, with keys as FileName and values as types ('file' or 'directory or 'vdoc'')
 */
function tntbase_get_path_contents($file_path, $nofilter=false) {
  $url = variable_get('tntbase_folder_contents_url') . $file_path;
  if ($url) {
  	$url.="?allFiles=true";
  }
  $response = tntbase_get($url);
  $document = new DOMDocument();
  $document->loadXML($response);

  $xpath = new DOMXPath($document);
  $xpath->registerNamespace('tnt', 'http://tntbase.mathweb.org/ns');
  $query = '//tnt:directory | //tnt:file | //tnt:vdoc';
  $nodelist = $xpath->query($query);

  $result = array();
  for ($i = 0; $i < $nodelist->length; $i++) {
    $name = $nodelist->item($i)->getAttribute('name');
    $lastSlash = strrpos($name, "/");
    if (!($lastSlash === false)) {
    	$name = substr($name, $lastSlash+1);
    }
    if (!empty($name)) {
      $result[$name] = substr($nodelist->item($i)->tagName, 4);
    }
  }

  if (empty($result) || $nodelist->length == 0) {
    return false;
  }
  return $result;
}

/**
 * Method used to get a set of bibliography entries for some keys at a particular location
 * @param array $Keys the keys that need bib resolving
 * @param string $Location the path towards to location of the bib item
 * @return an array of key => (text OR anchor to URL of the entry matched in the bib)
 */
function tntbase_get_bibliography($Keys, $Location = "/kwarc.xml") {
  $KeyString = "";
  foreach($Keys as $Key) {
    $KeyString .= '"'.$Key.'",';
  }
  $KeyString = substr($KeyString, 0, -1);
  $Query =
      "declare namespace b = ".'"http://bibtexml.sf.net/"'.';
       declare variable $keys := ('.$KeyString.');'.

      'declare function tnt:get-authors($e as element(b:entry)) {
        let $a := for $p in $e//b:person return concat ($p/b:first, " ", $p/b:last)
        return string-join($a, ", ")
      };'.

      'declare function tnt:get-title($e as element(b:entry)) {
        let $t := $e//b:title
      return $t
      };'.
  /*
   (* let $t := replace($t, "\{", "") *)
   (* let $t := replace($t, "\}", "") *)
   */
      'let $entries := tnt:doc('.'"'.$Location.'"'.')//b:entry[@id=$keys]
          return
          for $e in $entries return
          <div class ="bibtex-entry" id="{ $e//@id }"><a name="{ $e//@id }"></a>
          {
            if(not(empty($e//b:url)))
            then <a href="{$e//b:url}">{concat(tnt:get-authors($e), ". ", tnt:get-title($e))}</a>
            else concat(tnt:get-authors($e), ". ", tnt:get-title($e))
          }
          </div>';

  $Results = array();
  $Response = tntbase_query($Query);
  $Document = new DOMDocument();
  foreach($Response as $DIV) {
    $Document->loadXML($DIV);
    $Root = $Document->documentElement;
    $ID = $Root->getAttribute('id');
    $Results[$ID] = $Document->saveXML($Root);
    /*
     $Anchors = $Root->getElementsByTagName('a');
     if(0 == $Anchors->length) {
     $Results[$ID] = $Root->nodeValue;
     } else {
     $Results[$ID] = $Document->saveXML($Anchors->item(0));
     }
     */
    $Results[$ID] = str_replace(array("{", "}"), "", $Results[$ID]);
  }

  return $Results;
}

/**
 * Method to be used for fetching the source of a specific (S)TEX article corresponding file at the given path from TNTBase
 *
 * May get a .tex or .omdoc file and will look for the .tex source file
 *
 * @param string $FilePath the path into TNTBase of the OMDOC file
 * @return the actual source file at that path or <b>false</b> if it didn't exist
 */
function tntbase_get_source($FilePath) {
  // Checking if FilePath is .omdoc to convert it to tex
  $PathInfo = pathinfo($FilePath);

  if('omdoc' == $PathInfo['extension']) {
    $FilePath = $PathInfo['dirname'].'/'.$PathInfo['filename'].'.tex';
  }

  $Response = tntbase_get(variable_get('tntbase_fetch_source_url').$FilePath);
  //TODO: FIX THIS HACK
  $Response = trim($Response);
  if($Response[0] == "<") {
    return false;
  }

  return $Response;
}

/**
 * Method to be used for fetching the presentation of a specific article that exists in TNTBase
 *
 * Needs a wrapper of '<span xmlns:m="http://www.w3.org/1998/Math/MathML">'
 *
 * @param string $FilePath the path into TNTBase of the file in question
 * @return the presentation format of the requested file or <b>content saying error</b> if it didn't exist
 */
function tntbase_get_presentation($FilePath) {
  $Error = "<div>Error: could not properly get the presentation of your article!</div>";
  // Checking for FilePath to be .omdoc else if .tex, querying for the .omdoc as needed
  $PathInfo = pathinfo($FilePath);
  if('tex' == $PathInfo['extension']) {
    $FilePath = $PathInfo['dirname'].'/'.$PathInfo['filename'].'.omdoc';
  } elseif('omdoc' != $PathInfo['extension']) {
    return $Error;
  }

  $Response = tntbase_get(variable_get('tntbase_fetch_presentation_url').$FilePath);
  $OK = (substr($Response, 0, 5) != "Error");

  if($OK == false) {
    return $Error;
  }

  return $Response;
}

/**
 * Method to be used for creating Presentation format on the fly.
 *
 * Can be used in tandem with a repo, in which case, the $FilePath is needed for handling imports
 *
 * @param string $Content the OMDoc content
 * @param string $FilePath the optional path to the file
 * @return XHTML representing the Presentation format of the input OMDoc, or false on errors.
 */
function tntbase_create_presentation($Content, $FilePath = false) {
  //TODO: make this work
  //define a converter URL
  //use the converter URL and send the OMDoc there.
}

/**
 * Method to be used for fetching the title of a specific article that exists in TNTBase
 * @param string $FilePath the path into TNTBase of the file in question
 * @return the title of the specific file if it exists, else <b>a title saying error<b>
 */
function tntbase_get_title($FilePath) {
  // Checking for FilePath to be .omdoc else if .tex, querying for the .omdoc as needed
  $PathInfo = pathinfo($FilePath);
  $Error = $PathInfo['filename'];
  if('tex' == $PathInfo['extension']) {
    $FilePath = $PathInfo['dirname'].'/'.$PathInfo['filename'].'.omdoc';
  } elseif('omdoc' != $PathInfo['extension']) {
    return $Error;
  }

  $Data =
      'declare default element namespace "http://omdoc.org/ns";'
      .'declare namespace dc = "http://purl.org/dc/elements/1.1/";'
      .'(tnt:doc("'.$FilePath.'")'
      .'//dc:title)[1]'
      ;

      $Response = tntbase_post($Data, variable_get('tntbase_xquery_url'));
      $Title = tntbase_strip_tntbase_results($Response, true);
      if(empty($Title)) {
        return $Error;
      }

      return $Title[0];
}

/**
 * Method to be used for committing specific articles into TNTBase
 * May be used to either add new files or update existing ones
 * <i>Note: Only support sending valid sTeX files and will fail if sTeX is not proper</i>
 * @param array $Files an array of file structs with <b>Content</b> and <b>Path</b> fields
 * @return the head revision after the commit or <b>false</b> if the commit failed
 */
function tntbase_commit_files($Files) {
  $Request = array();


  //TODO: fix this code from Vanilla.
  if(false == variable_get('tntbase_stex')) {
    $host = variable_get('tntbase_latexml_url');
  } else {
    $host = variable_get('tntbase_latexml_stex_url');
  }
  foreach($Files as $File) {
    $File['Content-Type'] = $File['Content-Type'] ? $File['Content-Type'] : 'text/plain';
    $PathInfo = pathinfo($File['Path']);
    if($PathInfo['extension'] != 'tex') {
      //TODO: return something more meaningful
      return false;
    }
    $Request[] = $File;

    //TODO: CD -- fix this
//    $NewFile = array();
//    $NewFile['Path'] = $PathInfo['dirname'].'/'.$PathInfo['filename'].'.omdoc';
//    $NewFile['Content-Type'] = 'text/xml';
//    // Getting OMDoc
//    //TODO: get this from Deyan's daemon
//    $data = 'formula=' . urlencode($File['Content']);
//    $content = tntbase_post($data, $host);
//    $res = json_decode($content);
//
//    $NewFile['Content'] = trim($res->{'result'});
//    if(false == $NewFile['Content']) {
//      //TODO: return something more meaningful
//      return false;
//    }
//    $Request[] = $NewFile;
  }
  if(empty($Request)) {
    //TODO: return something more meaningful
    return false;
  }

  $Response = tntbase_putmpf($Request, variable_get('tntbase_commit_files_url'));

  $Document = new DOMDocument();
  $Document->loadXML($Response);

  $Xpath = new DOMXPath($Document);
  $Xpath->registerNamespace('tnt', "http://tntbase.mathweb.org/ns");
  $Query = "//tnt:revision";
  $Nodelist = $Xpath->query($Query);
  $Response = $Nodelist->item(0)->nodeValue;

  return $Response;
}

/**
 * Method to be used for committing a specific article into TNTBase
 * May be used to either add a new file or update an existing one
 * @param string $Content the content to try to commit
 * @param string $FilePath the FilePath into TNTBase under which to save the content
 * @return the revision number of the file just commited or <b>false</b> if the commit failed
 */
function tntbase_commit_xml($Content, $FilePath) {
  $Response = tntbase_put($Content, variable_get('tntbase_commit_url').$FilePath);
  $Message = tntbase_strip_tntbase_results($Response, false);

  // check message
  if(! $Message) {
    return false;
  }

  $Revision = tntbase_get_result_revision($Message);

  // It is either false or the number
  return $Revision;
}

/**
 * Method to be used for deleting a specific article from TNTBase
 * @param string $FilePath the path into TNTBase of the file in question
 */
function tntbase_delete_file($FilePath) {
  // Checking for FilePath to be .omdoc else if .tex, querying for the .omdoc as needed
  $PathInfo = pathinfo($FilePath);
  if(!('tex' == $PathInfo['extension'] || 'omdoc' == $PathInfo['extension'])) {
    return false;
  }

  $Response = tntbase_delete(variable_get('tntbase_commit_url').$PathInfo['dirname'].'/'.$PathInfo['filename'].'.tex');
  $Message = tntbase_strip_tntbase_results($Response, false);
  /*
   // check message
   if(! $Message) {
   return false;
   }
   */

  $Response = tntbase_delete(variable_get('tntbase_commit_url').$PathInfo['dirname'].'/'.$PathInfo['filename'].'.omdoc');
  $Message = tntbase_strip_tntbase_results($Response, false);
  /*
   // check message
   if(! $Message) {
   return false;
   }
   */

  //TODO: you can extract a revision count from this!!!
  //$Revision = TNTBaseComm::_GetResultRevision($Message);

  // It is either false or the number
  return $Revision;
}

/**
 * Method for executing any query to TNTBase
 * @param string $Query the query to execute
 * @return the result
 */
function tntbase_query($Query) {
  $Response = tntbase_post($Query, variable_get('tntbase_xquery_url'));
  return tntbase_strip_tntbase_results($Response);
}

/**
 * This method should be used to split responses wrapped into a <tnt:results> tag and strip the inner <tnt:result> tag as well.
 *
 * @param string $Response the response to be stripped
 */
function tntbase_strip_tntbase_results($Response, $StripEach = true) {
  if ($Response == "") {
  	return array();
  }
  $Results = array();
  $Document = new DOMDocument();
  $Document->loadXML($Response);

  $Xpath = new DOMXPath($Document);
  $Xpath->registerNamespace('tnt', "http://tntbase.mathweb.org/ns");

  $Query = "//tnt:error";
  $Nodelist = $Xpath->query($Query);
  if(0 < $Nodelist->length) {
    return $Results;
  }

  $Query = "//tnt:results";
  $Nodelist = $Xpath->query($Query);
  $Nodelist = $Nodelist->item(0)->childNodes;

  for($i = 0; $i < $Nodelist->length; $i++) {
    if($StripEach == true) {
      $Results[] = substr($Document->saveXML($Nodelist->item($i)), strlen("<tnt:result>"), (-1) * strlen("</tnt:result>"));
    } else {
      $Results[] = $Document->saveXML($Nodelist->item($i));
    }
  }
  return $Results;
}

/**
 * Internal method used to interpret the return message and retrieve the revision of the last change
 * @param string $Message the message returned by the last commit
 * @return the last revision number change or <b>false</b> if the message does not containt one
 */
function tntbase_get_result_revision($Message) {
  $Pattern = "/Commit info: r([0-9]*) /";
  $Matches = array();
  preg_match($Pattern, $Message, $Matches);

  if(empty($Matches[1])) {
    return false;
  }

  return $Matches[1];
}

/**
 * Method for getting all the necessary pieces of a document bundled up together in key => value array form
 * @param string $FilePath the path to the OMDOC file in question
 * @return an associative array or <b>false</b> if the path is not proper
 */
function tntbase_get_document($FilePath) {
  $Source = tntbase_get_source($FilePath);
  $Presentation = tntbase_get_presentation($FilePath);
  $Title = tntbase_get_title($FilePath);
  $Revision = tntbase_get_revisions($FilePath, true);
  $Document = array(
          'Body' => $Source,
          'BodyXHTML' => $Presentation,
          'TitleXHTML' => $Title,
          'Revision' => $Revision,
          'Path' => $FilePath
  );

  if(false == $Source ||
  false == $Presentation ||
  false == $Title ||
  false == $Revision ||
  false == $FilePath) {
    //TODO: MAKE THIS RETURN PROPER MEANINGFUL ERROR
    //        return false;
  }

  return $Document;
}

/**
 * Method used to get all the names of all the omdoc files in TNTBase under a certain folder structure.
 * <i>Note: This method recurses into all subfolders!</i>
 * @param string $RootPath the path to the root of the folder structure
 * @return an array of all the paths starting from the repository root of all the files under the given folder, else <b>false</b> otherwise
 */
function tntbase_get_document_names($RootPath) {
  $Response = tntbase_get(variable_get('tntbase_document_names_url').$RootPath.'?recursive=true');

  if(empty($Response)) {
    return false;
  }

  $Document = new DOMDocument();
  $Document->loadXML($Response);

  $Xpath = new DOMXPath($Document);
  $Xpath->registerNamespace('tnt', "http://tntbase.mathweb.org/ns");
  $Query = "//tnt:docname";
  $Nodelist = $Xpath->query($Query);

  $Result = array();
  for($i = 0; $i < $Nodelist->length; $i++) {
    $Result[] = $Nodelist->item($i)->nodeValue;
  }

  if(empty($Result)) {
    return false;
  }

  return $Result;
}

/**
 * Method for getting the actual SVN log from TNTBase
 * @param int $StartRev
 * @param int $EndRev
 * @return an array of A and D corresponding to the resolved added and deleted files
 */
function tntbase_get_log($StartRev, $EndRev) {
  $Log = tntbase_get(variable_get('tntbase_log_url')."?startrev=$StartRev&endrev=$EndRev");
  $Revisions = explode(",", $Log);

  $D = array();
  $A = array();

  foreach($Revisions as $Rev)
  {
    $Lines = explode("\n", $Rev);
    $Dump = false;
    foreach($Lines as $Line)
    {
      if(false == $Dump)
      {
        if(0 == strpos($Line, "svn:date"))
        {
          $Dump = true;
        }
      }
      else
      {
        if("A" == $Line[0])
        {
          $File = substr($Line, 2);
          $Ret = array_search($File, $D);
          $A[] = $File;
          if(false == $Ret)
          {
            //
          }
          else
          {
            unset($D[$Ret]);

          }
        }
        elseif("D" == $Line[0])
        {
          $File = substr($Line, 2);
          $Ret = array_search($File, $A);
          $D[] = $File;
          if(false == $Ret)
          {
            //
          }
          else
          {
            unset($A[$Ret]);

          }
        }
      }
    }
  }

  $Modifications = array("A" => $A, "D" => $D);
  return $Modifications;
}

/**
* Method used to get all the names of all files in TNTBase under a certain folder structure.
* @param string $RootPath the path to the root of the folder structure
* @return an array of all the paths starting from the repository root of all the files under the given folder, else <b>false</b> otherwise
*/
function tntbase_get_svn_ls($RootPath) {
	$Response = tntbase_get(variable_get('tntbase_document_names_url').$RootPath.'?recursive=true');

	if(empty($Response)) {
		return false;
	}

	$Document = new DOMDocument();
	$Document->loadXML($Response);

	$Xpath = new DOMXPath($Document);
	$Xpath->registerNamespace('tnt', "http://tntbase.mathweb.org/ns");
	$Query = "//tnt:docname";
	$Nodelist = $Xpath->query($Query);

	$Result = array();
	for($i = 0; $i < $Nodelist->length; $i++) {
		$Result[] = $Nodelist->item($i)->nodeValue;
	}

	if(empty($Result)) {
		return false;
	}

	return $Result;
}