<?php

/*
 * Integrates Book Drupal module with TNT Base
 * @version 1.0
 * @author Vlad Merticariu<v.merticariu@jacobs-university.de>
 * @todo toc
 * @todo link
 * @todo have 1 presentation for several books, to be replaced by javascript, keeping the html only once for every book page
 * @todo chpater <omgroup type="sectioning">title
 * @todo <currentSectionLevel> - macro to display the current section
 * @todo error messages
 * @todo sync problem => catalin
 * @todo deploy => constantin
 */

require_once 'class.TNTBaseComm.plugin.php';
$weight = 0;

/*
 * Helpers
 */
    
/**
 * Gets the children of a document
 * @param $filePath: the TNT path of the file 
 * @return array 
 */
function btnt_getXmlChildren($FilePath) {
    $Query = '
		declare default element namespace "http://omdoc.org/ns";
		let $doc := tnt:doc("' . $FilePath . '")
		let $refs := $doc//oref[@class="expandable"]/@href
		let $xmlchildren := for $ref in $refs return <child>{ string($ref) }</child>
		
		return 
		( 
		<children> { $xmlchildren } </children>
		)';
    $result = TNTBaseComm::Query($Query);
    if (empty($result)) {
        return array();
    } else {
        $xml = (array) simplexml_load_string($result[0]);
        if (empty($xml)) {
            return array();
        }
        $b = ($xml['child']);
        $a = array_map(function($element) {
                    return (string) $element;
                }, $b);
        return $a;
    }
}

/**
 * Starting from a basepath, this function constructs the path of the children documents
 * @param type $FilePath
 * @param type $BasePath
 * @return string 
 */
function btnt_expandPath($FilePath, $BasePath) {
    $FileArray = explode('/', $FilePath);
    $BaseArray = explode('/', $BasePath);

    if ($BasePath !== "/") {
        array_pop($BaseArray);
    }

    $MaxBasePointer = count($BaseArray) - 1;
    $BasePointer = $MaxBasePointer + 1;

    foreach ($FileArray as $Element) {
        if ($Element == "..") {
            $BasePointer--;
        } else if ($Element == ".") {
            continue;
        } else {
            if ($BasePointer > $MaxBasePointer) {
                $MaxBasePointer = $BasePointer;
                $BasePointer++;
                $BaseArray = array_merge($BaseArray, array($Element));
            } else {
                $BaseArray[$BasePointer] = $Element;
                $BasePointer++;
            }
        }
    }

    if ($BasePointer > $MaxBasePointer) {
        $BasePointer--;
    }

    if ($BasePath == "/") {
        $Index = 2;
    } else {
        $Index = 1;
    }
    $Result = "";
    for (; $Index <= $BasePointer; $Index++) {
        $Result = $Result . "/" . $BaseArray[$Index];
    }
    return $Result;
}

/*
 * Returns the nid of the node corresponding to the TNT Base article at the given path
 * @param $filePath: the TNT base path of the article
 * @return int: the node id
 */

function btnt_getNid($filePath) {
    $result = db_select('bookstnt', 'b')
            ->fields('b', array('nid'))
            ->condition('b.tntpath', $filePath)
            ->execute()
            ->fetchAssoc();
    return $result['nid'];
}

/*
 * Adds the nid and the TNT path of an article to the database.
 * @param $nid: the node id
 * @param $filePath: the TNT path
 */

function btnt_registerArticle($nid, $filePath) {
    db_insert('bookstnt')
            ->fields(array(
                'nid' => $nid,
                'tntpath' => $filePath
            ))
            ->execute();
}

/*
 * Processes the text from the xml given for title
 * @param $title: the title of the article
 */

function btnt_processTitle($title) {
    $title = simplexml_load_string($title);
    $strTitle = (string) $title->{0};
    while ($strTitle[0] == ',' || $strTitle[0] == ' ' || $strTitle[0] == ':' || $strTitle[0] == '.') {
        $strTitle = substr($strTitle, 1);
    }
    return ucfirst($strTitle);
}

/*
 * Processes the body of the retrieved document
 * @param $body: the body of the tnt doc
 * @param $book: the path of the book to which the document belongs
 */
function btnt_processBody($body){
    $chLinks = explode('<span class="omdoc-oref"', $body);
    //print_r($chLinks);
    foreach($chLinks as $key => $link){
        if($key){
            $getA = explode('<a' , $link, 2);
            $getT = explode('>', $getA[1], 2);
            $content = explode('</a>', $getT[1], 2);
            //print_r($content);
            $filePathArray = explode('..', $content[0]);
            $filePath = $filePathArray[sizeof($filePathArray)-1];
            $content[0] = btnt_processTitle(TNTBaseComm::GetTitle($filePath));
            $chLinks[$key] = $getA[0].'<a class="chapter-link"'.$getT[0].'>'.$content[0].'</a>'.$content[1];
        }
    }
    //print_r($chLinks);
    //exit(0);
    return implode('<span class="omdoc-oref"', $chLinks);
}

/**
 * Constructs recursively the tree of children of a document as a multidimensional array
 * @param type $filePath 
 * @param $book: the TNT path of the article at the top
 * @return array
 */
function btnt_constructChildrenTree($filePath) {
    $children = btnt_getXmlChildren($filePath);
    if (!empty($children)) {
        $ret = array();
        foreach ($children as $child) {
            $absoluteChild = btnt_expandPath($child, $filePath);
            //adds as a book bage
            //btnt_constructBookPage($absoluteChild, $filePath, $book);
            $ret[] = btnt_constructChildrenTree($absoluteChild);
        }
        return array($filePath, $ret);
    } else {
        return array(0 => $filePath, 1 => array());
    }
}

/*
 * Creates a book page from a TNTBase document
 * @param $filePath: the TNT path of the doc
 * @param $parent: the parent of the doc
 * @book $book: the TNT path of the article at the top 
 */

function btnt_constructBookPage($filePath, $parent, $book, $weight = 0) {
    global $user;
    $title = btnt_processTitle(TNTBaseComm::GetTitle($filePath));
    $body = btnt_processBody(TNTBaseComm::GetPresentation($filePath));
    //checks if the page was successfully imported
    if(strstr($body, 'Error: ')){
        db_insert('bookstnt_failed')
                ->fields(array(
                    'created' => REQUEST_TIME,
                    'tntpath' => $filePath
                ))
                ->execute();
        return;
    }
    $bid = btnt_getNid($book);
    $pid = btnt_getNid($parent);
    $drupalParent = node_load($pid);
    $plid = $drupalParent->book['mlid'];

    $node = (object) array(
                'uid' => $user->uid,
                'title' => (string) $title,
                'status' => 1,
                'type' => 'book',
                'body' => array(
                    'und' => array(
                        0 => array(
                            'value' => $body,
                            'safe_value' => '<p>' . $body . '</p>',
                            'format' => 'full_html' 
                        )
                    )
                ),
                'book' => array(
                    'module' => 'book',
                    'bid' => $bid,
                    'plid' => $plid,
                    'title' => (string) $title,
                    'weight' => $weight
                )
    );

    //
    try {
        node_save($node);
    } catch (Exception $e) {
        db_insert('bookstnt_failed')
                ->fields(array(
                    'created' => REQUEST_TIME,
                    'tntpath' => $filePath
                ))
                ->execute();
    }
    btnt_registerArticle($node->nid, $filePath);
}

/*
 * Creates the cover of the book  
 * @param $filePath: the TNT path of the document
 */

function btnt_constructCover($filePath) {
    global $user;
    $title = btnt_processTitle(TNTBaseComm::GetTitle($filePath));
    $body = btnt_processBody(TNTBaseComm::GetPresentation($filePath));

    $node = (object) array(
                'uid' => $user->uid,
                'title' => (string) $title,
                'status' => 1,
                'type' => 'book',
                'body' => array(
                    'und' => array(
                        0 => array(
                            'value' => $body,
                            'safe_value' => '<p>' . $body . '</p>',
                            'format' => 'full_html'
                        )
                    )
                ),
                'book' => array(
                    'module' => 'book',
                    'title' => (string) $title,
                    'bid' => 'new'
                )
    );

    //
    try {
        node_save($node);
    } catch (Exception $e) {
        db_insert('bookstnt_failed')
                ->fields(array(
                    'created' => REQUEST_TIME,
                    'tntpath' => $filePath
                ))
                ->execute();
    }
    btnt_registerArticle($node->nid, $filePath);
}

/*
 * Inserts a single tree node in Drupal, as bookpages
 */
function  btnt_insertNode($node, $parent, $book){
    btnt_constructBookPage($node[0], $parent, $book, $GLOBALS["weight"]);
    $GLOBALS["weight"]++;
    foreach($node[1] as $item){
        btnt_insertNode($item, $node[0], $book);
    }
}

/*
 * Constructs an entire book, starting from the cover
 * @param $filePath: the TNT path of the cover
 */

function btnt_constructBook($filePath) {
    //construct cover
    btnt_constructCover($filePath);
    //construct children tree with book pages
    $tree = btnt_constructChildrenTree($filePath);
    //store the tree
    /*$bNid = btnt_getNid($filePath);
    db_insert('bookstnt_tree')->fields(array(
        'nid' => $bNid,
        'tree' => serialize($tree)
    ))->execute();*/
    //build the rest of the pages
    foreach($tree[1] as $item){
        btnt_insertNode($item, $filePath, $filePath);
    }
    $bid = btnt_getNid($filePath);
    drupal_set_message('Book successfully created!');
    drupal_goto('node/' . $bid);
}

/*
 * 
 */
function btnt_showBody(){
    $filePath = $_POST['filePath'];
    $nid = btnt_getNid($filePath);
    $node = node_load($nid);
    print $node->body['und'][0]['value'];
}

/*
 * Test function for building the tree
 * @todo remove it after development
 */

function btnt_testTree() {
  
}

/*
 * Hooks
 */

/*
 * Implementation of hook_menu().  
 */

function btnt_menu() {
    $items['cover/%'] = array(
        'page callback' => 'btnt_constructCover',
        'page arguments' => array(arg(1)),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK
    );
    $items['page'] = array(
        'page callback' => 'btnt_constructBook',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK
    );
    $items['btnt/test/tree'] = array(
        'page callback' => 'btnt_testTree',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK
    );
    $items['btnt/test/book'] = array(
        'page callback' => 'btnt_constructBook',
        'page arguments' => array('/slides/gencs/notes/notes.omdoc'),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK
    );
    $items['btnt/callback/body'] = array(
        'page callback' => 'btnt_showBody',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK
    );
    return $items;
}

/*
 * Implementation of hook_node_delete(). 
 */

function btnt_node_delete($node) {
    if ($node->type == 'book') {
        db_delete('bookstnt')
                ->condition('nid', $node->nid)
                ->execute();
        $path = db_select('bookstnt', 'b')
                ->fields('b', array('tntpath'))
                ->condition('b.nid', $node->nid)
                ->execute()
                ->fetchAssoc();
        db_delete('bookstnt_failed')
                ->condition('tntpath', $path['tntpath'])
                ->execute();
    }
}

/*
 * Implementation of hook_node_load().
 */

function btnt_node_load($nodes, $types) {
    if (in_array('book', $types)) {
       //print_r($nodes);
       //exit(0);
    }
}

/**
 * Implementation of hook_node_view().
 */
function btnt_node_view($node, $view_mode, $langcode){
    if($node->type == 'book'){
        drupal_add_js(url(drupal_get_path('module', 'btnt').'/js/btnt.js'), 'external');
        drupal_add_js(url(drupal_get_path('module', 'btnt').'/js/expandable.js'), 'external');
        drupal_add_css(url(drupal_get_path('module', 'btnt').'/css/expandable.css'), 'external');
        //drupal_add_css(url(drupal_get_path('module', 'btnt').'/css/omdoc/omdoc-default.css'), 'external');
    }
}