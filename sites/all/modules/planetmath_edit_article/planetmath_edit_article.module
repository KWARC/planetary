<?php
/*
 * @file
 *
 * Provide a form-based UI to editors, and update contents of the
 * preamble accordingly (actually, we will update a field called
 * "metadata", which becomes part of the preamble when the code is
 * processed -- but this field is hidden from the user, since it is
 * maintained by Drupal based on the fields).
 *
 * This module is also responsible for other maintenance tasks, like
 * keeping the Canonical Name for the article unique.
 *
 * Later, we may write some code that will update the metadata fields
 * through e.g. SVN or Git, so that people can upload files from their
 * own archive.  The LaTeX metadata code will be useful for downstream
 * users who are interested in doing things on paper.
 *
 */

/*
 * STEP 1.  Add some extra fields to the "edit node" page. 
 * (We do this from the site's UI for now, see the article_setup feature.)
 */

/*
 * STEP 2. Programmatically stick some values into the metadata
 * preamble upon "save".
 */


/* 
 *  Implements hook_node_insert
 */

function planetmath_edit_article_node_insert($node){
        $now = date('o-m-d G:i:s');
	$node->field_timecreated['und'][0]['value'] = $now;
}

/* 
 *  Implements hook_node_presave
 */

function planetmath_edit_article_node_presave($node) {
  // ||$node->type==='problem'
  if ($node->type==='article'){

    // 1 - we will create or update the canonical name

    // check to see if the title has changed... we know it has if
    // the canonicalized version of the title is not the same as the
    // old canonical name...
    $newname = canonicalize_name($node, $node->title);

    if ( $node->field_canonicalname['und'][0]['value'] ) {
      if (!($newname === $node->field_canonicalname['und'][0]['value'])) {
	$node->field_canonicalname['und'][0]['value'] = $newname;
      }}
    else {
	$node->field_canonicalname['und'][0]['value'] = $newname;
      }

    $path= array('source' => 'node/'.$node->nid,
		 'alias' => $node->field_canonicalname['und'][0]['value']);

    path_save($path);

    // 2 - we will update the metadata depending on what we know about the article
    //     Note: we should maybe use planetmath_edit_article_node_insert for the
    //           time when the article is created...

    process_metadata($node);

    //dpm($node);
  }
}

function process_metadata($node){
  // The following debugging message shows how to access the metadata field.
  //dd("Node defines metadata: ".$node->field_latex['und'][0]['metadata']);

  $metadata = $node->field_latex['und'][0]['metadata'];
  $now = date('o-m-d G:i:s');
  $metadata =  "\\pmcanonicalname{".$node->field_canonicalname['und'][0]['value']."}\n";

  // time created is in the field time_created which is set by the
  // node_insert hook when the node is created

  // but we put a tiny piece of code here in case we are dealing with
  // pre-existing nodes where this field is not set

  $time_created = $now;
  if (isset($node->filed_timecreated['und'][0]['value'])){
    $time_created = $node->filed_timecreated['und'][0]['value'];
  }
	
  $metadata .= "\\pmcreated{".$time_created."}\n";
  $metadata .= "\\pmmodified{".$now."}\n";

  global $user;
  $metadata .= "\\pmowner{".$node->name."}{".$user->uid."}\n";
  $metadata .= "\\pmmodifier{".$node->name."}{".$user->uid."}\n";
  $metadata .= "\\pmtitle{".$node->title."}\n";

  // this will have to change when we have a proper versioning system in place
  $metadata .= "\\pmrecord{1}{".$node->nid."}\n";
  $metadata .= "\\pmauthor{".$node->name."}{".$user->uid."}\n";

  if (isset($node->field_mathtype['und'][0])){
    $math_type = $node->field_mathtype['und'][0]['value'];
    if (isset($math_type)) $metadata .= "\\pmtype{".$node->type."}{".$math_type."}\n";
  }

  if (isset($node->field_revisioncomment['und'][0])){
    $field_revisioncomment = $node->field_revisioncomment['und'][0]['value'];
    if (isset($field_revisioncomment)) $metadata .= "\\pmcomment{".$field_revisioncomment."}\n";
  }

  if (isset($node->field_msc['und'][0])){
    $field_msc = $node->field_msc['und'][0]['value'];
    if (isset($field_msc)) {
      $metadata .= "\\pmclassification{msc}{".$field_msc."}\n";
    }
  }
	
  if (isset($node->field_parent['und'][0])){
    $field_parent = $node->field_parent['und'][0]['value'];
    if (isset($field_parent)) $metadata .= "%\\pmparent{".$field_parent."}\n";
  }

  if (isset($node->field_synonym['und'][0])){
    $field_synonym = $node->field_synonym['und'][0]['value'];
    if (isset($field_synonym)) {
      $synonym = explode(",",$field_synonym);
      foreach($synonym as $s){
	$ss = trim($s);
	$metadata .= "\\pmsynonym{".$ss."}{".$node->field_canonicalname['und'][0]['value']."}\n";
      }
    }
  }

  if (isset($node->field_keywords['und'][0])){
    $field_keywords = $node->field_keywords['und'][0]['value'];
    //do we need to split by colon :   ??
    if (isset($field_keywords)) {
      $keywords = explode(",",$field_keywords);
      foreach($keywords as $k){
	$kk = trim($k);
	$metadata .= "%\\pmkeywords{".$kk."}\n";
      }
    }
  }
	

  if (isset($node->field_related['und'][0])){
    $field_related = $node->field_related['und'][0]['value'];
    if (isset($field_related)){
      $related = explode(",",$field_related);
      foreach($related as $r){
	$rr = trim($r);
	$metadata .= "\\pmrelated{".$rr."}\n";
      }
    }
  }

  if (isset($node->field_defines['und'][0])){
    $field_defines = $node->field_defines['und'][0]['value'];
    if (isset($field_defines)){ 
      $defines = explode(",",$field_defines);
      foreach($defines as $d){
	$dd = trim($d);
	$metadata .= "\\pmdefines{".$dd."}\n";
      }
    }
  }
  $node->field_latex['und'][0]['metadata'] = $metadata;
}

function canonicalize_name($node, $str, $count = 1) {
  $words = explode(" ", $str);
  $name = "";
  foreach ($words as $word){
    $word = ucfirst(str_replace ("$", "", $word));
    $name = $name . $word;
  }
  $match = FALSE;

  // needs to be adjusted for the updating case!
  $othernames = db_query("SELECT field_canonicalname_value AS name FROM {field_data_field_canonicalname} WHERE entity_id <> :nid", array('nid' => $node->nid));
  foreach ($othernames as $othername){
    if(strcmp($othername->name, $name) == 0){
      $match = TRUE;
    }
  }
  if($match) {
    canonicalize_name($name . $count, $count + 1);
  } else {
    // finally, replace non-alphabetic stuff
    // (is this the best way?)
    return preg_replace("/[^a-zA-Z0-9\s]/", "", $name);;
  }
}
// EOF
