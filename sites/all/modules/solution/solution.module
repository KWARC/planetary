<?php

/**
 * Model functions
 */
function solution_model_saveSolution($node) {
  db_merge('problem_has_solution')
          ->key(array('sid' => $node->nid, 'pid' => $node->field_solution_problem['und'][0]['nid']))
          ->fields(array('sid' => $node->nid, 'pid' => $node->field_solution_problem['und'][0]['nid']))
          ->execute();
}

function solution_model_getAllProblems() {
  $query = db_query("SELECT nid, title FROM node WHERE `type`='problem'");
  $return = array();
  foreach ($query as $result) {
    $return[$result->nid] = $result->title;
  }
  return $return;
}

// This is an interesting function, which really implies that we don't "need" to have
// a field that keeps track of which problem the solution solves.  However, for the
// moment it's not SO bad to have the information in two places.  We can fix this
// later.
function solution_model_getProblem($node) {
  $result = db_query("SELECT n.nid FROM node n INNER JOIN problem_has_solution phs ON phs.pid = n.nid WHERE phs.sid = :sid", array(':sid' => $node->nid))->fetchObject();

  // Note: instead of doing this, we could just return $result->nid
  $problem = node_load($result->nid);
  return $problem;
}

function solution_view_getLinks($node) {
  $links = array(
      'problem-preview' => l('See Problem', 'node/' . $node->field_solution_problem['und'][0]['nid']->nid),
      'solution-new' => l('Add new Solution', 'node/add/solution/' . $node->field_solution_problem['und'][0]['nid']->nid),
      'solution-other' => l('View other Solutions', 'node/' . $node->field_solution_problem['und'][0]['nid']->nid . '/solutions')
  );
  return $links;
}

/**
 * Drupal hooks 
 */

/**
 * Implementation of hook_form 
 */
/* function solution_form_solution_node_form_alter(&$form, &$form_state) { */
/*   $form['problem'] = array( */
/*       '#type' => 'select', */
/*       '#title' => 'Problem', */
/*       '#options' => solution_model_getAllProblems(), */
/*       '#default_value' => arg(3) */
/*   ); */
/* } */


// This is only relevant if the user changes the problem that the solution is
// attached to.  Which, in theory, could happen.
function solution_node_update($node) {
  if ($node->type == 'solution') {
    solution_model_saveSolution($node);
  }
}



function solution_node_insert($node) {
    if ($node->type == 'solution') {
        //dest would be an array with a string in the form node/add/review/58579
        $dest = drupal_get_destination();
        dd($dest);
        //we need to extract the numeric
        preg_match("/node\/add\/solution\/([0-9]*)/", $dest['destination'], $matches);
        dd($matches);
        if (isset($matches[1])) {
	  //dd('i am in the block');
            dd($matches[1]);
            $problemID = $matches[1];
            db_merge('problem_has_solution')
                    ->key(array('pid' =>$problemID , 'sid' => $node->nid))
                    ->fields(array('pid' =>$problemID , 'sid' => $node->nid))
                    ->execute();
            drupal_set_message('Solution has been added to the problem');
            drupal_goto('node/' . $problemID);
        }
    }
}

function solution_node_view($node){
  
  // for node with type==solution
  // .. nothing special (at least for now)

  // for node with type==problem
  if($node->type == 'problem'){
    $newlinks = array();
    if (isset($node->content['planetary_links'])) {
	$oldlinks=$node->content['planetary_links']['#links'];
	if(!empty($oldlinks)) {
	  $newlinks=array_merge($oldlinks,solution_add_links($node));
	} else {
	  $newlinks = solution_add_links($node);
	}
      } else {
      $newlinks = solution_add_links($node);
    }

    $node->content['planetary_links'] = array(
        '#markup' => '',
        '#weight' => 10,
        '#theme' => 'planetary_links',
        '#links' => $newlinks
    );
  }
}

function solution_theme($existing, $type, $theme, $path){
  return array('solution_node_form' => array(
					    'render element' => 'form',            
					    'template' => 'solution-node-form',
					    'path' => drupal_get_path('module', 'solution'),
					    )
  );
}


/**
 * Implementation of hook_form_FORM_ID_alter()
 * @param array $form
 * @param array $form_state
 * @param array $form_id 
 */

// I'm not entirely sure this will work for us, but maybe.
// We SELECT the argument, but will it also be displayed?  It should be!
function solution_form_solution_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  //dd($form['#node']);

  if(isset($form['#node']->field_solution_problem['und'][0]['nid'])) {
    $val = $form['#node']->field_solution_problem['und'][0]['nid'];
  } else {
    $val = arg(3); 
  }
  // SOMEHOW THIS STUFF SCREWS UP THE VALIDATION
  // SO COMMENTING IT OUT.
  // ANYWAY, I'M GUESSING THE AUTOCOMPLETE FIELD TAKES CARE OF CHOOSING AVAILABLE ITEMS
  // FOR US...
  //$form['field_solution_problem']['und']['#type'] = 'select';
  //$form['field_solution_problem']['und']['#title'] = 'Problem';
  //$form['field_solution_problem']['und']['#options'] = solution_model_getAllProblems();
  $form['field_solution_problem']['und'][0]['nid']['#default_value'] = $val;
}

// We will only consider adding new solutions, not existing solutions
function solution_add_links($node) {
    $links = array(
        'attach-solution' => l('Add a solution to this problem', 'node/add/solution/' . $node->nid)
    );
    return $links;
}