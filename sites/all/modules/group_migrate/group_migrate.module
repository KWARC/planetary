<?php
/**
 * @file GroupMigrate module
 * @author holtzermann17@gmail.com
 * @version 1.0
 */

// NOTE: before running this code, make sure the email rerouting module is installed and configured properly!

/* Our porting strategy:

 * port_planetmath_groups_to_og:
 * - There are about 600 groups that are used, and about 10000 articles that have been shared to some group.
 * - Each of these groups should be ported directly (users from group membership and articles from ACL assignments)
 * port_world_writable:
 * - There are about 1115 objects that have default "write" permissions
 * - Create a World Writable group, and put every user into it; later, maintain this group using the Rules module
 * port_coauthors:
 * - There are about 1151 distinct objects shared to 1200 individuals via the ACL
 * - Create a new group for each object managed in this way, and add the users.  */

/**
 * Helpers
 */

// We need to be able to add groups, and we need to be able to add nodes as a subroutine.
function group_migrate_node_add_programmatic($type, $title, $uid, $body_text) {

  $node = (object) array("type"=>$type, "title"=>$title, "language"=>LANGUAGE_NONE);

  node_object_prepare($node);

  $node->uid = $uid;

  $node->body[$node->language][0]['value']   = $body_text;
  $node->body[$node->language][0]['summary'] = text_summary($body_text);
  $node->body[$node->language][0]['format']  = 'filtered_html';

  node_save($node); // After this call we'll get a nid
  return $node->nid;
}
// Test:
// node_add_programmatic('group','testing programmatic add for groups again',1,'bla bla woof woof');

// We need to be able to add groups, and we need to be able to add nodes as a subroutine.
function group_migrate_group_add_programmatic($name,$userid,$description) {
  $etid = node_add_programmatic('group', $name, $userid, $description);
  return og_get_group('node', $etid, TRUE);
}

// This operation is relatively simple; it assumes that the world writable group is group #1.
// It also requires that object ids in the old ACL are the same as nids in Drupal (they are).
function group_migrate_port_world_writable() {
  // Creates world writable group #1 (or change the code to use the correct number)!
  group_add_programmatic("World Writable", 1, "World writable articles - everyone has permission to edit.");
  $ww = db_query("SELECT gid FROM {og} where label = 'World Writable'")->fetchField();

  $users = db_query("SELECT uid FROM {users} where uid>1");
  foreach ($users as $uid) {
      og_membership_save(og_membership_create($ww, 'user', $uid->uid));
    }
  $articles = db_query("SELECT objectid FROM {planetmath_acl} WHERE default_or_normal = 'd' and _write = 1");
  foreach ($articles as $nid) {
      og_membership_save(og_membership_create($ww, 'node', $nid->objectid));
    }
  }
// Test (well, just do the damn thing): 
// port_world_writable();

/* this is the most straightforward adaptation: groups go to groups

 get the planetmath groups ...
 ideally we would only import the groups that are actually USED for something

 this leaves us only with groups that are not trivial:

 SELECT * from ( SELECT COUNT( planetmath_group_members.userid ) AS cnt, planetmath_group_members.groupid
 FROM planetmath_group_members GROUP BY planetmath_group_members.groupid ) as t WHERE t.cnt > 1; 

 this improves the above to give us the information we actually need, so it's what we use:

   SELECT t.groupid, planetmath_groups.userid, planetmath_groups.groupname, planetmath_groups.description 
   FROM planetmath_groups, ( SELECT COUNT( planetmath_group_members.userid ) AS cnt, planetmath_group_members.groupid
                               FROM planetmath_group_members
                               GROUP BY planetmath_group_members.groupid ) as t
                               WHERE t.cnt > 1 AND planetmath_groups.groupid = t.groupid;  */

function group_migrate_port_planetmath_groups_to_og() {
     
  $res = db_query("SELECT t.groupid, planetmath_groups.userid, planetmath_groups.groupname, planetmath_groups.description  FROM planetmath_groups, ( SELECT COUNT( planetmath_group_members.userid ) AS cnt, planetmath_group_members.groupid FROM planetmath_group_members GROUP BY planetmath_group_members.groupid ) as t WHERE t.cnt > 1 AND planetmath_groups.groupid = t.groupid");
     
  // OUTER LOOP: create og groups corresponding to the PM groups
  foreach ($res as $record) {
    $group = group_add_programmatic($record->groupname, $record->userid, $record->description);
     
    // INNER LOOP ONE: for each group, import users belonging to that group
    $users = db_query("SELECT DISTINCT userid FROM {planetmath_group_members} WHERE {planetmath_group_members}.groupid = :groupid", array(':groupid' => $record->groupid));
      
    dd('running users...');
    foreach ($users as $uid) {
      if($uid->userid != $record->userid){
        dd($uid->userid, 'user id loaded...');
        $user = user_load($uid->userid, TRUE);
        dd($group->gid, 'adding user to this new group...');
        // drush_set_error('DEBUGGING', dt('Will attempt to add user ' . $uid . ' to group ' . $gid . '.'));
        og_membership_save(og_membership_create($group->gid, 'user', $uid->userid));
        dd('user membership recorded...');
      }
    }
     
    // INNER LOOP TWO: for each group, import its articles
    $articles = db_query("SELECT DISTINCT objectid FROM {planetmath_acl} WHERE user_or_group = 'g' and subjectid = :groupid", array(':groupid' => $record->groupid));
     
    dd('running articles...');
    foreach ($articles as $nid) {
      dd($nid->objectid, 'object id loaded...');
      $node = node_load($nid->objectid);
      og_membership_save(og_membership_create($group->gid, 'node', $nid->objectid));
    }
    dd('done with this loop...');
  }
}
// Test (well, just do the damn thing):
// port_planetmath_groups_to_og();
	
// There are about 1151 distinct objects shared to 1200 individuals via the ACL
// - Create a new group for each object managed in this way, and add the users.
function group_migrate_port_coauthors () {
  // get the objects that are shared
  $objects = db_query("SELECT DISTINCT {planetmath_acl}.objectid, {planetmath_objects}.name, {planetmath_objects}.title, {planetmath_objects}.userid FROM {planetmath_acl}, {planetmath_objects} WHERE {planetmath_acl}.user_or_group = 'u' AND {planetmath_acl}.default_or_normal = 'n' AND {planetmath_objects}.uid = {planetmath_acl}.objectid");
	
  // OUTER LOOP: create og groups corresponding to the articles
  foreach ($objects as $object) {
    $group = group_add_programmatic('Editing Group for ' . $object->name, $object->userid, 'Coauthors for ' . $record->title);
	
    // INNER LOOP: for each group, import users belonging to that group
    $users = db_query("SELECT DISTINCT subjectid FROM {planetmath_acl} WHERE {planetmath_acl}.objectid = :objectid", array(':objectid' => $object->objectid));
	 
    dd('running users...');
    foreach ($users as $uid) {
      if ($uid->subjectid != $object->userid && $uid->subjectid != -1){
        dd($uid->subjectid, 'user id loaded...');
        // $user = user_load($uid->userid, TRUE);
        dd($group->gid, 'adding user to this new group...');
        og_membership_save(og_membership_create($group->gid, 'user', $uid->subjectid));
        dd('user membership recorded...');
      }
    }
	
    // we don't need to loop over articles this time, just add the one under consideration
    og_membership_save(og_membership_create($group->gid, 'node', $object->objectid));
  }
}
// Test (well, just do the damn thing):
// port_coauthors();

function group_migrate_run_group_migration(){
  port_world_writable();
  port_planetmath_groups_to_og();
  port_coauthors();
  return 'Groups created.';
}


/**
 * Drupal hooks
 */

/**
 * Implementation of hook_menu()
 */
function group_migrate_menu(){
    $items ['migrate/grp'] = array(
          'title' => 'Copy Groups',
          'description' => 'Rewrites old permissions as organic groups',
          'page callback' => 'group_migrate_run_group_migration',
          'type' => MENU_CALLBACK,
          'access arguments' => array('administer features')
    );
    return $items;
}
