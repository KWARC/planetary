<?php

function tryPrintExcerpt($content, $eid) {
  $doc = new DOMDocument();

  //Do dirty stuff here until DOMDocument supports HTML5 tags such as math
  $xml = "<?xml version='1.0' encoding='utf-8'?>\n".
    "<!DOCTYPE root [\n".
    "<!ENTITY nbsp \"&#160;\">\n".
    "]>\n".
    $content;
  libxml_use_internal_errors(true); //turn off warning just in case you have
  $doc->loadXML($xml);              //undefined XML entities (but HTML) in the
  libxml_clear_errors();            //$xml and then turn it back on

  $xpath = new DOMXPath($doc);
  $query = "//*[@id='$eid']";
  $nodelist = $xpath->query($query);

  $new = new DomDocument();

  if ($nodelist->item(0)->previousSibling) {
    $new->appendChild($new->importNode($nodelist->item(0)->previousSibling, true));
  }

  if ($nodelist->item(0)) {
  	$new->appendChild($new->importNode($nodelist->item(0), true));
  }
  
  if ($nodelist->item(0)->nextSibling) {
    $new->appendChild($new->importNode($nodelist->item(0)->nextSibling, true));
  }

  $str = $new->saveHTML();

  if ($str) {
    $str = '<div class="local_comments_relevant" style="background-color:#D1D1D1;">'.$str.'</div>';
    $str = '<div class="local_comments_title" style="font-weight:bold;">Relevant context:</div>' . $str;
    return $str;
  } else {
    return FALSE;
  }
}

/**
 *
 * Render
 */
function local_comments_showthread($nid, $eid) {
  if (!ctype_digit($nid)) {
    drupal_set_message("Invalid arguments ", "error");
    return "";
  }
  $res = db_query("SELECT loc.cid, c.thread FROM {local_comments} as loc, {comment} as c WHERE loc.nid = :nid and loc.eid=:eid and loc.cid=c.cid",
         array(':nid' => $nid,
           ':eid' => $eid));

  $node = node_load($nid);
  $build = node_view($node);
  $content = drupal_render($build);
  $excerpt = tryPrintExcerpt($content, $eid);
  /*global $user;
    $node = (object) array(
    'uid'=>$user->uid,
    'type'=>'node',
    'name'=> isset($user->name)?$user->name:'',
    'comment' => COMMENT_NODE_OPEN,
    );*/

  $result = $excerpt;
  $str = array();
  $any = false;
  foreach ($res as $record) {
    $any = true;
    $cid = $record->cid;
    $thread = $record->thread;
    $thread = substr($thread, 0, strlen($thread)-1);

    $query = db_select('comment', 'c');
    $query->addField('c', 'cid');
    $query
      ->condition('c.nid', $nid)
      ->addTag('node_access')
      ->addTag('comment_filter');
    if (!user_access('administer comments')) {
      $query->condition('c.status', COMMENT_PUBLISHED);
    }
    $query->where('SUBSTRING(c.thread, 1, '.strlen($thread).')=:tthread',array(":tthread"=>$thread));
    $query->orderBy('thread', 'DESC');
    $cids = comment_load_multiple($query->execute()->fetchCol());
    comment_prepare_thread($cids);
    $build = comment_view_multiple($cids, $node);
    $result.=drupal_render($build);
  }
  if (!$any) {
    drupal_set_message("No thread found", "warning");
    return "";
  }
  return $result;
}

function local_comments_preprocess(&$variables, $hook) {
  drupal_add_library('system', 'drupal.ajax');
  //  drupal_add_css(drupal_get_path("module", "local_comments")."/css/jquery.contextMenu.css", array("weight"=>4));
  drupal_add_css(drupal_get_path("module", "local_comments")."/css/local_comments.css", array("weight"=>4));
  drupal_add_js(drupal_get_path("module", "local_comments")."/lib/jquery.livequery.js", array("weight"=>4));
  drupal_add_js(drupal_get_path("module", "local_comments")."/lib/jquery.scrollTo-1.4.2-min.js", array("weight"=>4));
  drupal_add_js(drupal_get_path("module", "local_comments")."/lib/jquery.glow.js", array("weight"=>4));
  drupal_add_js(drupal_get_path("module", "local_comments")."/lib/jquery.contextMenu.js", array("weight"=>5));
  drupal_add_js(drupal_get_path("module", "local_comments")."/js/local_comments.js", array("weight"=>6));
}


function local_comments_menu() {
    $items['local_comments/article'] = array(
    'page callback' => 'local_comments_article',
    'type' => MENU_CALLBACK
  );
  $items["local_comments/showthread"] = array(
    'page callback' => 'local_comments_showthread',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );
  $items['local_comments/add'] = array(
  	   'title'              => '',
        'page callback'      => 'local_comments_addNewComment',
        'access callback'    => TRUE
  );
  $items['local_comments/get'] = array(
  	   'title'              => '',
        'page callback'      => 'local_comments_getThreads',
        'access callback'    => TRUE
  );
  return $items;
}

function local_comments_getThreads( $nid, $eid ){
	$query = db_select( 'local_comments', 'l' );
	$query->fields( 'l' );
	$query->condition( 'l.eid', $eid )->condition( 'l.nid', $nid );
	$result = $query->execute();

	$q = db_select( 'comment', 'c' );
	//   $q->fields( array( 'c.subject', 'c.created', 'c.name' ) );
	$q->fields( 'c' );
	$q->condition( 'c.nid', $nid );

	if( $result->rowCount() <= 0 ) exit( drupal_json_output( array() ) );

	$or = db_or();
	foreach( $result as $r )
	$or->condition( 'c.cid', $r->cid );

	$q->condition( $or );

	$a = array();

	$res = $q->execute();
	foreach( $res as $r )
	$a[] = array(
         'cid'       => $r->cid,
         'subject'   => $r->subject,
         'name'      => $r->name
	);


	echo drupal_json_output( $a );
}

function local_comments_addNewComment( $pid = '', $nid = '', $eid = '', $subject = '', $comment = '' ){
	global $user;

   if( !isset($user) || !isset($user->name) ){
      exit( drupal_json_output( array(
         'result' => false, 
         'error' => 'You must be logged in to create a discussion thread'
      ) ) );
   }

	$c = (object) array(
      'pid'            => $pid,
      'nid'            => $nid,
      'uid'            => $user->uid,
      'mail'           => '',
      'is_anonymous'   => 0,
      'homepage'       => '',
      'status'         => COMMENT_PUBLISHED,
      'subject'        => $subject,
      'language'       => LANGUAGE_NONE,
      'comment_body' => array(
	      LANGUAGE_NONE => array(
            0 => array (
                   'value' => $comment,
                   'format' => 'filtered_html'
            )
	      )
	   ),
	);

	$newComment = comment_submit( $c );
	comment_save( $c );

	local_comments_comment_insert(
      (object) array(
            'eid'    => $eid,
            'nid'    => $nid,
            'cid'    => $newComment->cid,
            'text'   => $comment
      )
	);

	echo drupal_json_output( array( 'result' => true ) );

}

function local_comments_article ($nid = -1) {
  if ($cid < 0) return;
  $res = db_query("SELECT * FROM {local_comments} WHERE nid = :nid", array(':nid' => $nid));

  $str = array();
  foreach ($res as $record) {
    $str[] =  array(
      'id' => $record->id,
      'nid' => $record->nid,
      'eid' => $record->eid,
      'cid' => $record->cid,
    );
  }
  drupal_json_output($str);
}

//an alternative way to do it is to override the hook
// hook_form_FORM_ID_alter
function local_comments_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'comment_node_lecture_form') {
    $form['eid'] = array(
      '#type' => 'hidden',
      '#id' => 'eid',
      '#title' => t("The ID of the element this comment references"),
      '#required' => FALSE,
      '#size' => 60,
      '#maxlength' => 64,
    );
  }
}

function local_comments_comment_insert($comment) {

	require_once( drupal_get_path('module', 'tinfobar').'/constants.php' );

   if( isset( $comment->eid ) ){
   	global $user;
	   $eid = $comment->eid;
	   $nid = $comment->nid;
	   $cid = $comment->cid;

	   $fields = array('nid' => $nid, 'cid' => $cid, 'eid' => $eid);
	   db_insert('local_comments')->fields($fields)->execute();

	   $tInfoBar = array(
         'type'      => 'localComment',
         'context'   => $nid,
         'wordID'    => $eid,
         'user'      => $user->name,
         'text'      => isset( $comment->text ) ? $comment->text : $comment->comment_body['und'][0]['value']
	   );
	   db_insert( TABLE_TINFOBAR )->fields( $tInfoBar )->execute();
	}
}


function local_comments_comment_view($comment, $view_mode, $langcode) {
  $lc = db_query("SELECT * FROM {local_comments} WHERE cid = :cid", array(":cid" => $comment->cid))->fetchObject();

  if ($lc) {
    $comment->eid = $lc->eid;
  } else {
    $comment->eid = "";
  }
}

function local_comments_theme_registry_alter(&$vars) {
  $vars['comment']['theme path'] = drupal_get_path('module','local_comments');
  $vars['comment']['path'] = drupal_get_path('module','local_comments');
  $vars['comment']['theme paths'] = array(0 => drupal_get_path('module','local_comments'));
}
