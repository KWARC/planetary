<?php

/**
 * Adds useful blocks for the planetmath theme
 * @author Alex Dumitru <m.dumitru@jacobs-university.de> 
 */
define('PLANETMATH_BLOCKS_NUMBER_OF_ITEMS_ON_BLOCK', 7);
define('PLANETMATH_BLOCKS_NUMBER_OF_USERS_ON_BLOCK', 7);
define('PLANETMATH_BLOCKS_NUMBER_OF_CORRECTIONS_ON_BLOCK', 5);
define('PLANETMATH_BLOCKS_EVERYTHING_ELSE_TYPES', serialize(array('correction', 'request', 'image', 'problem', 'solution')));

/**
 * Queries for the block views 
 */
function planetmath_blocks_queryGeneral($type, $sortBy = 'n.created') {
  $results = db_query("SELECT n.nid AS nid, n.title AS title, n.uid, fdb.body_value AS body, u.`name` AS username, n.created, n.changed
    FROM node n 
    LEFT JOIN field_data_body fdb ON n.nid = fdb.entity_id 
    INNER JOIN users u ON u.uid = n.uid
    WHERE n.`type` = :type ORDER BY $sortBy DESC LIMIT 0," . PLANETMATH_BLOCKS_NUMBER_OF_ITEMS_ON_BLOCK, array(':type' => $type));
  $return = array();
  foreach ($results as $result) {
    $return[] = $result;
  }
  return $return;
}

function planetmath_blocks_queryPersonalResponses($uid) {
  $results = db_query("SELECT c.cid, n.nid, n.type, n.title, c.subject, c.uid, c.changed, u.name AS username FROM comment c
      INNER JOIN node n ON n.nid = c.nid      
      INNER JOIN users u ON u.uid = c.uid
      WHERE n.uid = :node_uid AND c.uid != :comment_uid
      ORDER BY c.changed DESC LIMIT 0,".PLANETMATH_BLOCKS_NUMBER_OF_ITEMS_ON_BLOCK, array('node_uid' => $uid, 'comment_uid' => $uid));
  $return = array();
  foreach ($results as $result) {
    $return[] = $result;
  }
  return $return;  
}

function planetmath_blocks_queryEverythingElse($sortBy = 'n.changed') {
  $results = db_query("SELECT n.nid AS nid, n.title AS title, n.uid, fdb.body_value AS body, u.`name` AS username, n.created
    FROM node n 
    LEFT JOIN field_data_body fdb ON n.nid = fdb.entity_id 
    INNER JOIN users u ON u.uid = n.uid
    WHERE n.`type` IN (:type) ORDER BY $sortBy DESC LIMIT 0," . PLANETMATH_BLOCKS_NUMBER_OF_ITEMS_ON_BLOCK, array(':type' => unserialize(PLANETMATH_BLOCKS_EVERYTHING_ELSE_TYPES)));
  $return = array();
  foreach ($results as $result) {
    $return[] = $result;
  }
  return $return;
}

function planetmath_blocks_queryMessages() {
  $results = db_query("SELECT n.nid AS nid, n.type, n.changed, n.title AS title, n.uid, fdb.body_value AS body, u.`name` AS username, n.created
    FROM node n 
    LEFT JOIN field_data_body fdb ON n.nid = fdb.entity_id 
    INNER JOIN users u ON u.uid = n.uid
    WHERE n.`type` = 'forum' ORDER BY n.changed DESC LIMIT 0," . floor(PLANETMATH_BLOCKS_NUMBER_OF_ITEMS_ON_BLOCK / 2));
  $return = array();

  foreach ($results as $result) {
    $return[] = $result;
  }

  $results = db_query("SELECT c.cid, n.nid, n.type, c.subject, c.uid, c.changed, c.name AS username FROM comment c
      INNER JOIN node n ON n.nid = c.nid      
      INNER JOIN users u ON u.uid = c.uid
      ORDER BY c.changed DESC LIMIT 0," . floor(PLANETMATH_BLOCKS_NUMBER_OF_ITEMS_ON_BLOCK / 2));

  foreach ($results as $result) {
    $return[] = $result;
  }

  usort($return, function($elem1, $elem2) {
            if ($elem1->changed < $elem2->changed) {
              return 1;
            } else if ($elem1->changed > $elem2->changed) {
              return -1;
            }
            return 0;
          });

  return $return;
}

function planetmath_blocks_queryUserList() {
  $results = db_query("SELECT u.uid, u.`name`, ut.points
    FROM users u
    LEFT JOIN userpoints_total ut ON ut.uid = u.uid
    ORDER BY ut.points DESC LIMIT 0," . PLANETMATH_BLOCKS_NUMBER_OF_USERS_ON_BLOCK);

  $return = array();
  foreach ($results as $result) {
    $return[] = $result;
  }
  return $return;
}

function planetmath_blocks_queryCorrections($nid) {
  $results = db_query("SELECT n.nid AS nid, n.title AS title, fdb.body_value AS body, u.`name` AS username, n.created, u.uid AS uid
    FROM node n 
    LEFT JOIN field_data_body fdb ON n.nid = fdb.entity_id 
    LEFT JOIN field_data_field_correction_article fca ON fca.entity_id = n.nid
    INNER JOIN users u ON u.uid = n.uid
    WHERE n.`type` = :type AND fca.field_correction_article_nid = :nid ORDER BY n.created DESC LIMIT 0," . PLANETMATH_BLOCKS_NUMBER_OF_CORRECTIONS_ON_BLOCK, array(':type' => 'correction', ':nid' => $nid));
  $return = array();
  foreach ($results as $result) {
    $return[] = $result;
  }
  return $return;
}

function planetmath_blocks_countCorrectionsPerArticle($nid) {
  return (db_query("SELECT COUNT(n.nid) AS cnt FROM node n
                  INNER JOIN field_data_field_correction_article fca ON fca.entity_id = n.nid
                  WHERE fca.field_correction_article_nid = :nid", array(':nid' => $nid))->fetchObject()->cnt > 0) ? true : false;
}

function planetmath_blocks_versions($nid) {
  $results = db_query("SELECT v.vid AS vid, n.nid AS nid, n.title AS title, u.name AS username, u.uid AS uid 
    FROM node_revision v 
    INNER JOIN node n ON v.nid = n.nid 
    INNER JOIN users u ON u.uid = v.uid
    WHERE n.nid = :nid ORDER BY n.created DESC LIMIT 0,7", array(':nid' => $nid));
  $return = array();
  foreach ($results as $result) {
    $return[] = $result;
  }
  return $return;
}

function planetmath_blocks_countVersionsPerArticle($nid) {
  return (db_query("SELECT COUNT(n.nid) AS cnt FROM node n
                  INNER JOIN node_revision nv ON nv.nid = n.nid
                  WHERE n.nid = :nid", array(':nid' => $nid))->fetchObject()->cnt > 0) ? true : false;
}

function planetmath_blocks_blockThemeResults($results) {
  if (empty($results)) {
    return '<h4>No results found</h4>';
  }
  $html = "";//  '<div style="padding-left:7%;padding-right:10%;padding-bottom:10%;"><br />';
  foreach ($results as $result) {
    if (!isset($result->vid))
      $result->vid = "";
    $html .= '<span >' . l($result->title . ' ' . $result->vid, 'node/' . $result->nid) . ' by ' . l($result->username, 'user/' . $result->uid) . '</span><br />';
  }
  //$html .= "</div>";
  return $html;
}

function planetmath_blocks_blockThemeResultsWithDate($results, $sortBy = 'created') {
  if (empty($results)) {
    return '<h4>No results found</h4>';
  }
  $dates = array();

  $html = "";// '<div style="padding-left:7%;padding-right:10%;padding-bottom:10%;"><br />';
  foreach ($results as $result) {
    if (!isset($result->vid)) {
      $result->vid = "";
    }
    //dd($dates[count($dates) - 1]);
    if (strcmp($dates[count($dates) - 1], date('Y-m-d',$result->$sortBy)) != 0) {
      array_push($dates,date('Y-m-d',$result->$sortBy));
      $html .= '<span class="block-day-date">'.date('Y-m-d',$result->$sortBy).'</span><br />';
    }
    $html .= '<span >' . l($result->title . ' ' . $result->vid, 'node/' . $result->nid) . ' by ' . l($result->username, 'user/' . $result->uid) . '</span><br />';
  }
  //$html .= "</div>";
  return $html;
}

function planetmath_blocks_blockThemeUserListResults($results) {
  if (empty($results)) {
    return '<h4>No results found</h4>';
  }
  // jac - got the right-justified numbers working
  $html = "";//'<div style="padding-left:10%;padding-right:10%;padding-bottom:10%;"><br />';
  foreach ($results as $result) {
    $html .= '<span>' . l($result->name, 'user/' . $result->uid) . '</span><span class="block-day-date">' . intval($result->points) . ' </span><br />';
  }
  //$html .= '</div >';
  return $html;
}

function planetmath_blocks_blockThemeMessagesResults($results) {
  if (empty($results)) {
    return '<h4>No results found</h4>';
  }
  $html = "";// '<div style="padding-left:7%;padding-right:10%;padding-bottom:10%;"><br />';

  foreach ($results as $result) {
    if (isset($result->cid)) {

      // This gives some small visual indication of article nodes vs forum nodes.
      if ($result->type == 'article') {
        $code = 'P';
      } else {
        $code = 'p';
      }
      $html .= '<span >' . date('Y-m-d', $result->changed) . " - [" . l($code, 'node/' . $result->nid) . "] " . l($result->subject, 'node/' . $result->nid, array('fragment' => 'comment-' . $result->cid)) . ' by ' . l($result->username, 'user/' . $result->uid) . '</span><br />';
    } else {
      $html .= '<span >' . date('Y-m-d', $result->changed) . " - " . l($result->title, 'node/' . $result->nid) . ' by ' . l($result->username, 'user/' . $result->uid) . '</span><br />';
    }
  }
  //$html .= "</div>";
  return $html;
}

function planetmath_blocks_blockThemeMyPersonalResults($results) {
  global $user;
  if(!$user->uid){
    return "<h4>Please log in to view the results</h4>";
  }
  if (empty($results)) {
    return '<h4>No results found</h4>';
  }
  $html = "";// '<div style="padding-left:7%;padding-right:10%;padding-bottom:10%;"><br />';

  foreach ($results as $result) {
    $html .= '<span>' . date('Y-m-d', $result->changed) . " - " . l($result->username, 'user/' . $result->uid) . " " . l('replied', 'node/' . $result->nid, array('fragment' => 'comment-' . $result->cid)) . ' to ' . l($result->title, 'user/' . $result->nid) . '</span><br />';
  }
 // $html .= "</div>";
  return $html;
}

/**
 * Implementation of hook_block_info 
 */
function planetmath_blocks_block_info() {
  $blocks = array();
  $block_names = array('article', 'request', 'problem', 'forum', 'news', 'correction', 'pversion', 'cross-reff', 'userlist', 'revision', 'message', 'everything-else', 'personal-feed');
  foreach ($block_names as $name) {
    $blocks[$name] = array(
        'info' => t($name),
    );
  }
  return $blocks;
}

function planetmath_blocks_crossRefMockBlock() {
  return array(
      'subject' => 'Cross References',
      'content' => 'open problem, amenable, contradiction, relation, equivalence, clear, support, theorems, injective'
  );
}

function planetmath_blocks_block_versions($nid) {
  return array(
      'subject' => 'Versions',
      'content' => planetmath_blocks_blockThemeResults(planetmath_blocks_versions($nid))
  );
}

function planetmath_blocks_block_corrections($nid) {
  return array(
      'subject' => 'Corrections',
      'content' => planetmath_blocks_blockThemeResults(planetmath_blocks_queryCorrections($nid))
  );
}

function planetmath_blocks_block_messages() {
  return array(
      'subject' => 'Latest Messages',
      'content' => planetmath_blocks_blockThemeMessagesResults(planetmath_blocks_queryMessages())
  );
}

function planetmath_blocks_block_revisions() {
  return array(
      'subject' => 'Latest Revisions',
      'content' => planetmath_blocks_blockThemeResultsWithDate(planetmath_blocks_queryGeneral('article', 'n.changed'),'changed')
  );
}

function planetmath_blocks_block_userList() {
  return array(
      'subject' => 'Top Users',
      'content' => planetmath_blocks_blockThemeUserListResults(planetmath_blocks_queryUserList())
  );
}

function planetmath_blocks_block_everythingElse() {
  return array(
      'subject' => 'Everything Else',
      'content' => planetmath_blocks_blockThemeResultsWithDate(planetmath_blocks_queryEverythingElse(),'created')
  );
}

function planetmath_blocks_block_personalFeed() {
  global $user;
  return array(
      'subject' => 'Personal Feed',
      'content' => planetmath_blocks_blockThemeMyPersonalResults(planetmath_blocks_queryPersonalResponses($user->uid))
  );
}

/**
 * Implementation of hook_block_view
 */
function planetmath_blocks_block_view($delta = '') {
  $block = array();
  $block_names = array('article' => 'Latest Additions',
		       'request' => 'Requests',
		       'problem' => 'Problems',
		       'news' => 'News',
		       'forum' => 'Messages',
		       'solution' => 'Solutions');

  foreach ($block_names as $name => $cannonicalName) {
    if ($delta == $name) {
      $block = array(
          'subject' => t(ucfirst($cannonicalName)),
          'content' => planetmath_blocks_blockThemeResultsWithDate(planetmath_blocks_queryGeneral($name),'created')
      );
    }
  }

  if ($delta == 'correction') {
    $block = planetmath_blocks_block_corrections(arg(1));
  }

  if ($delta == 'revision') {
    $block = planetmath_blocks_block_revisions();
  }

  if ($delta == 'message') {
    $block = planetmath_blocks_block_messages();
  }

  if ($delta == 'userlist') {
    $block = planetmath_blocks_block_userList();
  }

  if ($delta == 'cross-reff') {
    $block = planetmath_blocks_crossRefMockBlock();
  }

  if ($delta == 'everything-else') {
    $block = planetmath_blocks_block_everythingElse();
  }

  if ($delta == 'pversion') {
    $block = planetmath_blocks_block_versions(arg(1));
  }

  if ($delta == 'personal-feed') {
    $block = planetmath_blocks_block_personalFeed();
  }

  return $block;
}

