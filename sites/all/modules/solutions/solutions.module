<?php


//function solutions_menu(){
//   $items = array();
//
//  $items['solutions/add'] = array(
//      'title' => 'Solutions',
//      'type' => MENU_CALLBACK,
//      'page callback' => 'solutions_add',
//      'page arguments' => array(1),
//      'access arguments' => array('create correction content')
//  );
//}
//function solutions_add(){
//    
//}
/**
 * Model functions
 */
function solutions_model_saveSolution($node) {
    db_merge('problem_has_solution')
            ->key(array('sid' => $node->nid, 'pid' => $node->problem))
            ->fields(array('sid' => $node->nid, 'pid' => $node->problem))
            ->execute();
}

function solutions_model_getAllProblems() {
    $query = db_query("SELECT nid, title FROM node WHERE `type`='problem'");
    $return = array();
    foreach ($query as $result) {
        $return[$result->nid] = $result->title;
    }
    return $return;
}

function solutions_model_getProblem($node) {
    $result = db_query("SELECT n.nid as nid FROM node n INNER JOIN problem_has_solution phs ON phs.pid = n.nid WHERE phs.sid = :sid", array(':sid' => $node->nid))->fetchObject();
    if ($result) {
        $problem = node_load($result->nid);
        return $problem;
    }else return;
}

function solutions_access ($op, $node, $account) {

  switch($op) {
    case 'update':
      return ($node->uid == $account->uid) ? TRUE : NULL;
  }
}

function solutions_view_getLinks($node) {
    global $user;
    $how_many = solutions_get_number_of_solutions($node);
    $has_parent = solutions_get_number_of_problems($node);

    $can_edit = solutions_access("update",$node,$user);
    
    if ($has_parent > 0) {
        $has_parent = 'Solution to "' . l($node->problem->title . '"', 'node/' . $node->problem->nid);
    }else {
        $has_parent = 'Unattached solution';
    }
    
    if ($can_edit){
        $edit_text = l('Attach this Solution to a Problem', 'node/'.$node->nid."/edit");
        
    }else {
        $edit_text= "";
    }
    
    if ($how_many > 0) {
        $links = array(
            'problem-preview' => $has_parent,
            'solution-new' => l('Add new Solution', 'node/add/solution/' . $node->problem->nid),      
      'solution-other' => l('View other Solutions(' . $how_many . ')', 'node/' . $node->problem->nid . '/solutions')
        );
        return $links;
    } else if ($can_edit){
        $links = array(
            'problem-preview' => $has_parent,
            'solution-new' => $edit_text);
        return $links;
    } else {
        $links = array(
            'problem-preview' => $has_parent);
        return $links;
    }
}

/*
 * returns the number of solutions to this problem
 */

function solutions_get_number_of_solutions($node) {
    $result = db_query("SELECT count(n.nid) AS how_many " .
            "FROM node n INNER JOIN problem_has_solution phs ON phs.pid = n.nid " .
            "WHERE phs.sid = :sid", array(':sid' => $node->nid))->fetchObject();
    return $result->how_many;
}

function solutions_get_number_of_problems($node) {
    $result = db_query("SELECT count(phs.pid) AS how_many " .
            "FROM problem_has_solution phs " .
            "WHERE phs.sid = :sid", array(':sid' => $node->nid))->fetchObject();
    return $result->how_many;
}

/**
 * Drupal hooks 
 */

/**
 * Implementation of hook_form 
 */
function solutions_form_solution_node_form_alter(&$form, &$form_state) {
    $form['problem'] = array(
        '#type' => 'select',
        '#title' => 'Problem',
        '#options' => solutions_model_getAllProblems(),
        '#default_value' => arg(3)
    );
}

function solutions_node_insert($node) {
    if ($node->type == 'solution') {
        solutions_model_saveSolution($node);
    }
}

function solutions_node_update($node) {
    if ($node->type == 'solution') {
        solutions_model_saveSolution($node);
    }
}

function solutions_node_load($nodes, $types) {
    if (in_array('solution', $types)) {
        foreach ($nodes as &$node) {
            if ($node->type == 'solution') {
                $node->problem = solutions_model_getProblem($node);
            }
        }
    }
}

function solutions_node_view($node, $view_mode, $langcode) {
    if ($node->type == 'solution') {
        $node->content['planetary_links'] = array(
            '#markup' => '',
            '#weight' => 10,
            '#theme' => 'planetary_links',
            '#links' => solutions_view_getLinks($node)
        );
    }
}

