<?php

function correction_install() {
  // get the translation function relevant to our current localisation
  $t = get_t();
  // define the content type as an array (same as in hook_node_info())
  $correction = array(
    'type' => 'correction',
    'name' => $t('Correction'),
    'base' => 'node_content',
    'description' => $t('Content type to handle corrections.'),
    'body_label' => $t('Correction Description'),
    'promote' => 0,
    'status' => 1,
    'comment' => 0,
  );

  // set default values for anything not explicitly defined in the above array
  $content_type = node_type_set_defaults($correction);

  // add the body field to the content type
  node_add_body_field($content_type, 'Body');

  // create the content type
  node_type_save($content_type);

  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_correction_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (_correction_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = 'correction';
    field_create_instance($instance);
  }

}

// NEED
// field_revision_field_correction_article  
// field_revision_field_correction_accepted 
// field_revision_field_correction_closed   
// field_revision_field_correction_type
function _correction_installed_fields() {
  $t = get_t();
  $fields = array(
    'field_correction_article' => array(
      'field_name'  => 'field_correction_article',
      'label'       => $t('Reference to the article this correction is about'),
      'cardinality' => 1,
      'type'        => 'node_reference',
      'settings'    => array(
        'referenceable_types'  => array('article'),
      ),
    ),
    'field_correction_accepted' => array(
      'field_name'  => 'field_correction_accepted',
      'label'       => $t('Status of the article (was it accepted)'),
      'cardinality' => 1,
      'entity_type' => 'node',
      'type'        => 'list_boolean',
      'settings'    => array(
        'allowed_values' => array(0 => '0', 1 => '1'),
        'allowed_values_function' => '',
      ),
    ),
    'field_correction_closed' => array(
      'field_name'  => 'field_correction_closed',
      'label'       => $t('Status of the article (is it still pending)'),
      'cardinality' => 1,
      'entity_type' => 'node',
      'type'        => 'list_boolean',
      'settings'    => array(
        'allowed_values' => array(0 => '0', 1 => '1'),
        'allowed_values_function' => '',
      ),
    ),
    'field_correction_type' => array(
      'field_name'  => 'field_correction_type',
      'label'       => $t('What kind of correction is this'),
      'cardinality' => 1,
      'type'        => 'list_text',
      'settings'    => array(
        'allowed_values' => array('err' => 'Error', 'add' => 'Add', 'met' => 'Meta',),
        'allowed_values_function' => '',
      ),
    ),
  );
  return $fields;
}

function _correction_installed_instances() {
  $t = get_t();
  $instances = array(
    'field_correction_article' => array(
      'field_name'  => 'field_correction_article',
      'label'       => $t('Reference to the article this correction is about'),
      'cardinality' => 1,
      'widget'      => array(
        'type'          => 'node_reference_autocomplete',
      ),
    ),
    'field_correction_accepted' => array(
      'field_name'  => 'field_correction_accepted',
      'label'       => $t('Status of the article (was it accepted)'),
      'cardinality' => 1,
      'widget'      => array(
        'type'          => 'options_onoff',
        //'settings' => array('display_label' => 1)
      ),
    ),
    'field_correction_closed' => array(
      'field_name'  => 'field_correction_closed',
      'label'       => $t('Status of the article (is it still pending)'),
      'cardinality' => 1,
      'widget'      => array(
        'type'          => 'options_onoff',
        //'settings' => array('display_label' => 0)
      )
    ),
    'field_correction_type' => array(
      'field_name'  => 'field_correction_type',
      'label'       => $t('What kind of correction is this'),
      'cardinality' => 1,
      'widget'      => array(
	'type'          => 'options_select',
     ),
    ),
  );
  return $instances;
}


function correction_uninstall() {
  // Gather all the example content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'correction'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);


  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_correction_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('correction');

  // Purge all field information
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
}