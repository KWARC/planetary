<?php
/**
 * Implements hook_menu().
 */
function planetary_libs_menu() {

  // Main menu item.
  $items['admin/config/system/planetary_libraries'] = array(
    'title' => 'Planetary Library Settings',
    'description' => 'Load libraries',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('planetary_libs_settings'),
    'access arguments' => array('administer themes'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 100,
  );

  // Return the menu item definitions.
  return $items;
}

/**
* Helper Function to check if one string start with another
* Adapted from http://stackoverflow.com/questions/834303/php-startswith-and-endswith-functions
* @param $haystack String to check.
* @param $needle Starting string
*/
function startsWith($haystack, $needle)
{
    return !strncmp($haystack, $needle, strlen($needle));
}

function planetary_libs_js_alter(&$javascript) {
  $base_path = drupal_get_path('module', 'planetary_libs');

  //jQuery
  $javascript['misc/jquery.js']['data']    =  $base_path . '/libs/jquery/jquery-1.9.1.js';
  $javascript['misc/jquery.js']['version'] = '1.9.1';

  $hooked_in_ui = false;

  foreach($javascript as $filename => $value){
    if(startsWith($filename, "misc/ui/jquery.ui")){
      if(!$hooked_in_ui){
        $hooked_in_ui = true;
        $javascript[$filename]['data'] = $base_path . '/libs/jquery-ui/js/jquery-ui-1.10.3.min.js';
      } else {
        unset($javascript[$filename]);
      }
    }
  }

}

function planetary_libs_css_alter(&$css) {
  $base_path = drupal_get_path('module', 'planetary_libs');
  $hooked_in_ui = false;

  foreach($css as $filename => $value){
    if(startsWith($filename, "misc/ui/jquery.ui")){
      if(!$hooked_in_ui){
        $hooked_in_ui = true;
        $css[$filename]['data'] = $base_path . '/libs/jquery-ui/css/smoothness/jquery-ui-1.10.3.min.css';
      } else {
        unset($css[$filename]);
      }
    }
  }
}

/**
 * Implements hook_init().
 */
function planetary_libs_init() {

  // Retrieve the current theme name.
  $current_theme = variable_get('theme_default', 'none');

  // Retrieve the settings for all themes.
  $all_settings = variable_get('planetary_libs_settings');

  // Get the settings for a specific theme
  if (isset($all_settings[$current_theme])) {
    $settings = $all_settings[$current_theme];
  }
  else {
    $settings = array();
  }

  // Get all the currently registered libraries.
  $libraries = array();
  foreach (libraries_info() as $name => $info) {
    $libraries[$name] = libraries_detect($name);
  }

  // Sort the libraries by their array key.
  ksort($libraries);

  // Go through each library and load the ones chosen.
  foreach ($libraries as $machine_name => $library) {
    // Check to see if the library should be loaded.
    if (isset($settings['libraries'][$machine_name]['load']) && $settings['libraries'][$machine_name]['load'] == 1) {
      // Make sure the library still exists.
      if (($library2 = libraries_detect($machine_name)) && !empty($library2['installed'])) {
        // Load the library or speicifed variant.
        libraries_load($machine_name);
      }
    }
  }
}


/*
 * Build the settings form.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 */
function planetary_libs_settings($form, &$form_state, $key = 'global') {

  // Save the current theme name in the form state.
  $form_state['theme_key'] = $key;

  // Retrieve the settings for all themes.
  $all_settings = variable_get('planetary_libs_settings');

  // Get the settings for a specific theme
  if (isset($all_settings[$key])) {
    $settings = $all_settings[$key];
  }
  else {
    $settings = array();
  }

  // Libraries section title.
  $form['libraries-title'] = array(
    '#type' => 'item',
    '#title' => 'Available Libraries',
    '#description' => 'Below are all the libraries registered with your site, you can load a particular library by checking the box and choosing a variant.',
  );

  // Create a table for all the possible touch icons, the children of this
  // element will not be rendered directly but will be referenced by each row of
  // the table.
  $form['libraries'] = array(
    '#theme' => 'table',
    '#header' => array(t('Load'), t('Library'), t('Status'), t('Version'), t('Variant'), t('Actions')),
    '#rows' => array(),
    '#tree' => TRUE,
  );

  // Get all the currently registered libraries.
  $libraries = array();
  foreach (libraries_info() as $name => $info) {
    $libraries[$name] = libraries_detect($name);
  }

  // Sort the libraries by array key.
  ksort($libraries);

  // Generate the field markup for each library
  foreach ($libraries as $machine_name => $library) {

    $form['libraries'][$machine_name]['load'] = array(
      '#type' => 'checkbox',
      '#description' => '',
      '#default_value' => (isset($settings['libraries'][$machine_name]['load']) ? $settings['libraries'][$machine_name]['load'] : 0),
    );

    // Build the variants options array.
    $variants = array('default' => 'default');
    $variants += array_keys($library['variants']);


    $form['libraries'][$machine_name]['variant'] = array(
      '#type' => 'select',
      '#description' => '',
      '#options' => $variants,
      '#default_value' => (isset($settings['libraries'][$machine_name]['variant']) ? $settings['libraries'][$machine_name]['variant'] : 'default')
    );

    // If the library isnt present then you can t load it.
    if (!$library['installed']) {
      $form['libraries'][$machine_name]['load']['#disabled'] = TRUE;
      $form['libraries'][$machine_name]['variant']['#disabled'] = TRUE;
    }

    // Add a table row.
    $form['libraries']['#rows'][] = array(
      'data' => array(
        array('data' => &$form['libraries'][$machine_name]['load']),
        t('@name<br />@file', array(
          '@name' => $library['name'],
          '@file' => 'sites/all/libraries/' . $machine_name . '/' . $library['version arguments']['file'],
        )),
        ($library['installed'] ? t('OK') : drupal_ucfirst($library['error'])),
        (isset($library['version']) ? $library['version'] : ''),
        array('data' => &$form['libraries'][$machine_name]['variant']),
        t('<a href="@vendor-url">Homepage</a>&nbsp;|&nbsp;<a href="@download-url">Download</a>', array(
          '@vendor-url' => $library['vendor url'],
          '@download-url' => $library['download url'],
            )
        )
      ),
      'class' => array(
        ($library['installed'] ? 'ok' : 'warning')
      )
    );
  }

  // Library download instructions.
  $form['libraries-make'] = array(
    '#type' => 'item',
    '#title' => 'Download all libraries with drush',
    '#description' => 'You can download libaries using the following drush command.',
  );

  // Library download drush make command.
  $form['libraries-command'] = array(
    '#markup' => '<pre>drush make ' . drupal_get_path('module', 'planetary_libs') . '/planetary_libs.make --no-core</pre>',
  );

  // Libraries block tutorial.
  $form['libraries-attach'] = array(
    '#type' => 'item',
    '#title' => 'Attaching Library files to a block.',
    '#description' => 'You dont have to load a library on every page to use it, you can attach it to a block definition to use it only when that block is in use.',
  );

  // Libraries block tutorial example.
  $form['libraries-attach-example'] = array(
    '#markup' => '<pre>libraries_load(\'mylibrary\');
$block[\'#attached\'][\'libraries_load\'][] = array(\'mylibrary\');</pre>',
  );

  // Submit button.
  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );

  // Display an error message if the settings cant be saved
  if (!empty($_POST) && form_get_errors()) {
    drupal_set_message(t('The settings have not been saved because of the errors.'), 'error');
  }

  // Add a submit handler to save the settings.
  $form['#submit'][] = 'planetary_libs_theme_settings_submit';

  // Render the form using theme_system_settings_form().
  $form['#theme'] = 'system_settings_form';

  return $form;
}

/**
 * Custom Submit handler for the theme settings form.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 */
function planetary_libs_theme_settings_submit($form, &$form_state) {

  $data_to_save = variable_get('planetary_libs_settings');

  // Remove internal Form API values.
  unset($form_state['values']['form_id'], $form_state['values']['form_token'], $form_state['values']['form_build_id'], $form_state['values']['op'], $form_state['values']['submit']
  );

  // Retrieve the current theme name that was saved when the form was defined.
  $theme = $form_state['theme_key'];

  // Wipe the settings.
  $data_to_save[$theme] = array();

  foreach ($form_state['values'] as $key => $value) {
    if (is_array($value) && isset($form_state['values']['array_filter'])) {
      $value = array_keys(array_filter($value));
    }
    $data_to_save[$theme][$key] = $value;
  }

  // Save the settings.
  variable_set('planetary_libs_settings', $data_to_save);

  drupal_set_message(t('The configuration options have been saved.'));
}

function planetary_libs_libraries_info() {

  // Underscore Javascript Library (no longer needed for JOBAd)
  /*
  $libraries['underscore'] = array(
    'name' => 'Underscore',
    'vendor url' => 'https://github.com/documentcloud/underscore',
    'download url' => 'https://github.com/documentcloud/underscore/zipball/master',
    'version arguments' => array(
      'file' => 'underscore.js',
      'pattern' => '/Underscore.js (\d+)/',
      'lines' => 1,
    ),
    'files' => array(
      'js' => array(
        'underscore.js',
      )
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'underscore.min.js',
          )
        ),
      ),
    ),
  );
  */

  // JOBAD Javascript Library
  $libraries['jobad'] = array(
    'name' => 'JOBAD',
    'vendor url' => 'https://github.com/KWARC/jobad',
    'download url' => 'https://github.com/KWARC/jobad/zipball/stable',
    'version arguments' => array(
      'file' => 'build/release/JOBAD.min.js',
      'pattern' => '/JOBAD v(\d+)/',
      'lines' => 2,
    ),
    'files' => array(
      'js' => array(
        'build/release/JOBAD.js',
      ),
      'css' => array(
        'build/release/JOBAD.css',
      )
    ),
    'dependencies' => array('jquery', 'jquery-ui'),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'build/release/JOBAD.min.js',
          ),
          'css' => array(
            'build/release/JOBAD.css',
          )       
        ),
      ),
    ),
  );

  // jquery
  $libraries['jquery'] = array(
    'name' => 'jquery',
    'vendor url' => 'http://jquery.com/',
    'download url' => 'http://code.jquery.com/jquery.min.js',
    'version arguments' => array(
      'file' => 'jquery.min.js',
      'pattern' => '/jQuery v.([0-9a-zA-Z\.-]+)/',
    ),
    'files' => array(
      'js' => array(
        'jquery.min.js',
      ),
    )
  ); 


  // jquery-ui
  $libraries['jquery-ui'] = array(
    'name' => 'jquery-ui',
    'vendor url' => 'http://jquery.com/',
    'download url' => 'http://code.jquery.com/ui/1.10.3/jquery-ui.js',
    'version arguments' => array(
      'file' => 'ui/minified/jquery-ui.min.js',
      'pattern' => '/jQuery UI - v.([0-9a-zA-Z\.-]+)/',
    ),
    'files' => array(
      'css' => array(
        'themes/base/jquery-ui.css',
      ),
      'js' => array(
        'ui/minified/jquery-ui.min.js',
      ),
    )
  ); 



  // RequireJS
  $libraries['requirejs'] = array(
    'name' => 'requirejs',
    'vendor url' => 'http://requirejs.org/',
    'download url' => 'http://requirejs.org/docs/release/2.1.5/minified/require.js',
    'version arguments' => array(
      'file' => 'require.js',
      'pattern' => '/RequireJS ([0-9a-zA-Z\.-]+)/',
    ),
    'files' => array(
      'js' => array(
        'require.js',
      ),
    )
  );


  // jQuery Terminal
  $libraries['jquery.terminal'] = array(
    'name' => 'jquery.terminal',
    'vendor url' => 'http://terminal.jcubic.pl/',
    'download url' => 'https://github.com/jcubic/jquery.terminal/tarball/master',
    'version arguments' => array(
      'file' => 'terminal.jquery.json',
      'pattern' => '/"version": "([0-9a-zA-Z\.-]+)"/',
    ),
    'files' => array(
      'js' => array(
        'jquery.terminal-min.js',
      ),
      'css' => array(
        'css/jquery.terminal.css',
      ),
    ),
  );

  // jQuery UI Layout
  $libraries['jquery.layout'] = array(
    'name' => 'jquery.layout',
    'vendor url' => 'http://layout.jquery-dev.net/',
    'download url' => 'http://layout.jquery-dev.net/lib/js/jquery.layout-latest.min.js',
    'version arguments' => array(
      'file' => 'jquery.layout-latest.min.js',
      'pattern' => '/jquery.layout ([0-9a-zA-Z\.-]+)/',
    ),
    'files' => array(
      'js' => array(
        'jquery.layout-latest.min.js',
      ),
      'css' => array(
        'layout-default-latest.css'
      )
    ),
  );

  // jQuery UI Layout
  $libraries['editor_tools'] = array(
    'name' => 'Editor tools',
    'vendor url' => 'https://github.com/jucovschi/EditorTools',
    'download url' => 'https://github.com/jucovschi/EditorTools/archive/master.zip',
    'version arguments' => array(
      'file' => 'editor_utils.json',
      'pattern' => '/"version": "([0-9a-zA-Z\.-]+)"/',
    ),
    'files' => array(
      'js' => array(
        'editor_utils.min.js',
      ),
    ),

  );

  // jQuery UI Layout
  $libraries['office-ribbon'] = array(
    'name' => 'office-ribbon',
    'vendor url' => 'https://github.com/jucovschi/Office-Ribbon-2010',
    'version arguments' => array(
      'file' => 'ribbon/jquery.tooltip.min.js',
      'pattern' => '/plugin ([0-9\.]+)/',
    ),
    'files' => array(
      'js' => array(
        'ribbon/ribbon.js',
      ),
      'css' => array(
        'ribbon/ribbon.css'
      )
    ),
  );

  return $libraries;
}


/**
 *
 * @param type $library
 * @param type $options
 * @return type
 */
function _planetary_libs_force_version($library,$options) {
  $file = DRUPAL_ROOT . '/' . $library['library path'] . '/' . $options['file'];
  if (empty($options['file']) || !file_exists($file)) {
    return;
  }
  return $library['version arguments']['force'];
}
