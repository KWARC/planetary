<?php

/**
 * @file
 * batch_latex.module -- batch processing of LaTeX files
 */

/**
 *
 * The @link batch_latex.install .install file @endlink also shows how the
 * Batch API can be used to handle long-running hook_update_N() functions.
 *
 * One mostly harmless batch is defined, and here is what it does:
 * - Load all nodes using a progressive op, loading nodes by groups of 5.
 * - Saves each of them, triggering LaTeX rendering.
 * @see batch
 */

/**
 * Implements hook_menu().
 */
function batch_latex_menu() {
  $items = array();
  $items['batch_latex'] = array(
    'title' => 'Batch LaTeX processing',
    'description' => 'Batch process LaTeX articles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('batch_latex_simple_form'),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Form builder function to allow choice of which batch to run.
 */
function batch_latex_simple_form() {
  $form['description'] = array(
    '#type' => 'markup',
    '#markup' => t('This module offers one batch processing function.  It loads all of the files, rendering their LaTeX and saving their metadata.'),
  );
  $form['batch'] = array(
    '#type' => 'select',
    '#title' => 'Choose batch',
    '#options' => array('batch_latex' => t('Batch process the LaTeX articles'),
    ),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Go',
  );

  return $form;
}

function batch_latex_simple_form_submit($form, &$form_state) {
  drupal_set_message(t("Form says: @info", array('@info' => $form_state['values']['batch'])));
  $function = 'batch_latex_process';

  // reset counter for debug information.
  $_SESSION['http_request_count'] = 0; 

  $batch = $function();
  batch_set($batch);
}

function batch_latex_process() {

  $node_count = db_query("SELECT COUNT(DISTINCT nid) FROM {node} where type='article'")->fetchField();
  drupal_set_message(t('There are @node_count nodes to process.', array('@node_count' => $node_count)));

  $operations = array();

  for ($i = 0; $i < $node_count; $i++) {
    $operations[] = array('batch_latex_operation', array(t('(Operation @operation)', array('@operation' => 1))));
  }

  $batch = array(
    'operations' => $operations,
    'finished' => 'batch_latex_finished',
    // We can define custom messages instead of the default ones.
    'title' => t('Processing LaTeX files'),
    'init_message' => t('LaTeX rendering is starting.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('LaTeX rendering process has encountered an error.'),
  );
  return $batch;
}

/**
 * Batch operation for batch 2 : load all nodes, 5 at a time.
 * After each group of 5 control is returned to the batch API for later
 * continuation.
 */
function batch_latex_operation($operation_details, &$context) {

  // Use the $context['sandbox'] at your convenience to store the
  // information needed to track progression between successive calls.
  // and save node count for the termination message.

  if (empty($context['sandbox'])) {
    $context['sandbox'] = array();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = db_query('SELECT COUNT(DISTINCT nid) FROM {node}')->fetchField();
  }

  // Process nodes by groups of 5 (arbitrary value).
  // When a group of five is processed, the batch update engine determines
  // whether it should continue processing in the same request or provide
  // progress feedback to the user and wait for the next request.
  // That way even though we're already processing at the operation level
  // the operation itself is interruptible.

  //  $limit = 5;

  // Retrieve the next group of nids.
  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->orderBy('n.nid', 'ASC')
    ->condition('type','article')
    ->where('n.nid > :nid', array(':nid' => $context['sandbox']['current_node']))
    ->extend('PagerDefault')
    // ->limit($limit) 
    ->execute();

  // Here we actually perform our processing ...
  foreach ($result as $row) {

    // just catch a few that I didn't process before.
//    if($row->nid > 40411){
      $node = node_load($row->nid, NULL, TRUE);
      if(isset($node->field_latex['und'][0]['preamble']) && isset($node->field_latex['und'][0]['document'])){
        $node->field_latex['und'][0]['preamble'] =
          str_replace("\usepackage{xypic}","%\\usepackage{xypic}",$node->field_latex['und'][0]['preamble']);
        $node->field_latex['und'][0]['document'] =
          $node->field_latex['und'][0]['document'] . "%";
        dd("Processed: " . $node->canonicalname . "(" . $node->nid . ")");
        node_save($node);
        // Store some result for post-processing in the finished callback.
        // and update our progress information.
        $context['sandbox']['current_node'] = $node->nid;
        $context['results'][] = $node->nid . ' : ' . check_plain($node->title) . ' ' . $operation_details;
        $context['sandbox']['progress']++;
        $context['sandbox']['current_node'] = $node->nid;
        $context['message'] = check_plain($node->title);

        // In case we are not done, inform the batch engine that we are not finished,
        // and provide an estimation of the completion level we reached.
        if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
          $context['finished'] = ($context['sandbox']['progress'] >= $context['sandbox']['max']);
        }
      }
//    } else { 
//      dd("Skipping: (" . $row->nid . ")"); 
//    }
  }



  _batch_latex_update_http_requests();
}

/**
 * Batch 'finished' callback used by both batch 1 and batch 2.
 */
function batch_latex_finished($success, $results, $operations) {
  if ($success) {

    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed...

    drupal_set_message(t('@count results processed in @requests HTTP requests.', array('@count' => count($results), '@requests' => _batch_latex_get_http_requests())));

    drupal_set_message(t('The final result was "%final"', array('%final' => end($results))));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
}

/**
 * Utility function to count the HTTP requests in a session variable.
 */

function _batch_latex_update_http_requests() {
  $_SESSION['http_request_count']++;
}

function _batch_latex_get_http_requests() {
  return !empty($_SESSION['http_request_count']) ? $_SESSION['http_request_count'] : 0;
}
