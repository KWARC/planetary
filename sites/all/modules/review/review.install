<?php

function review_install() {
  // get the translation function relevant to our current localisation
  $t = get_t();
  // define the content type as an array (same as in hook_node_info())
  $review = array(
              'type' => 'review',
              'name' => 'Review',
              'base' => 'node_content',
              'module' => 'node',
              'description' => t(''),
              'has_title' => 1,
              'custom' => false,
              'modified' => false,
              'locked' => 1,
              'disabled' => 0,
	      'promote' => 0,
	      'status' => 1,
	      'comment' => 0,
              'orig_type' => 'review'
  );

  // set default values for anything not explicitly defined in the above array
  $content_type = node_type_set_defaults($review);

  // add the body field to the content type - actually we don't want this here
  // node_add_body_field($content_type, 'Body');

  // create the content type
  node_type_save($content_type);
  node_types_rebuild();
  menu_rebuild();

  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_review_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (_review_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = 'review';
    field_create_instance($instance);
  }

}

// NEED
// field_data_field_review_latex
function _review_installed_fields() {
  $t = get_t();
  $fields = array(
    'field_review_latex' => array(
      'field_name'  => 'field_review_latex',
      'label'       => $t('LaTeX field for this review.'),
      'cardinality' => 1,
      'type'        => 'field_latex',
      'settings' => array(
			  'filter' => 'latex',
			  ),
    ),
    'field_review_result' => array(
      'field_name'  => 'field_review_result',
      'label'       => $t('Is the solution ultimately sucessful, unsuccessful, or is the reviewer unsure?'),
      'cardinality' => 1,
      'type'        => 'list_text',
      'settings'    => array(
        'allowed_values' => array('suc' => 'Success', 'uns' => 'Not Successful', 'unk' => 'Reviewer unsure',),
        'allowed_values_function' => '',
      ),
    ),
    'field_review_solution' => array(
      'field_name'  => 'field_review_solution',
      'label'       => $t('Reference to the solution this review concerns'),
      'cardinality' => 1,
      'type'        => 'node_reference',
      'settings'    => array(
        'referenceable_types'  => array('solution'),
      ),
    ),
  );
  return $fields;
}

function _review_installed_instances() {
  $t = get_t();
  $instances = array(
    'field_review_result' => array(
      'field_name'  => 'field_review_result',
      'label'       => $t('Is the solution ultimately sucessful, unsuccessful, or is the reviewer unsure?'),
      'cardinality' => 1,
      'widget'      => array(
	'type'          => 'options_select',
     ),
    ),
    'field_review_solution' => array(
      'field_name'  => 'field_review_solution',
      'label'       => $t('Reference to the solution this review concerns.'),
      'cardinality' => 1,
      'widget'      => array(
        'type'          => 'node_reference_autocomplete',
      ),
    ),
    'field_review_latex' => array(
      'field_name'  => 'field_review_latex',
      'label'       => $t('LaTeX field for this review'),
      'cardinality' => 1,
      'bundle' => 'review',
      'widget' => array(
			'active' => 1,
			'module' => 'latex_field',
			'settings' => array(
					    'filter' => 'tex_editor',
					    ),
			'type' => 'latex_widget',
			),
      // hoping this is the right way to make the label hidden
      'display' => array(
			 'default' => array(
					    'label' => 'hidden',
					    'module' => 'latex_field',
					    'settings' => array(),
					    'type' => 'latex_formatter',
					    'weight' => '6',
					    ),
			 'full' => array(
					 'label' => 'hidden',
					 'module' => 'latex_field',
					 'settings' => array(),
					 'type' => 'latex_formatter',
					 'weight' => '0',
					 ),
			 'teaser' => array(
					   'label' => 'above',
					   'settings' => array(),
					   'type' => 'hidden',
					   'weight' => 0,
					   ),
			 )
    ),
  );
  return $instances;
}

function review_uninstall() {
  // Gather all the example content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'review'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);


  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_review_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('review');

  // Purge all field information
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
}


function review_schema() {
  $schema = array();

  $schema['solution_has_review'] = array(
      'description' => 'Connection table between solutions and reviews',
      'fields' => array(
          'sid' => array(
              'type' => 'int',
              'unsigned' => true,
              'not null' => true,
              'description' => 'solution Id'
          ),
          'rid' => array(
              'type' => 'int',
              'unsigned' => true,
              'not null' => true,
              'description' => 'review Id'
          )
      ),
      'primary key' => array('sid', 'rid')
  );

  return $schema;
}