<?php

/**
 * Contanins several function to migrate the content from the old planet math to the alpha
 * Use migration_migrateUserFields() to migrate the profiles from the old system to the drupal one
 * Use migration_corrections() to migrate the corrections and all their relevant data(comments)
 * @author Alex Dumitru alex@flanche.net
 * @package Migration
 * @version 1.0.0 - alpha
 */

/**
 * Migrates user profiles from the old system to the other.
 */
function migration_migrateUserFields() {
  set_time_limit(0);
  $fieldList = array(
      'forename',
      'surname',
      'city',
      'state',
      'country',
      'homepage',
      'bio',
      'preamble',
      'score',
  );
  $count = db_query("SELECT COUNT(uid) AS user_count FROM {users}")->fetchObject();
  for ($i = 0; $i < $count->user_count; $i += 50) {
    $users = db_query("SELECT name, uid FROM {users} WHERE status = 1 LIMIT $i, 50 ")->fetchAll();
    foreach ($fieldList as $field) {
      $insert = db_insert('field_data_field_user_' . $field)->fields(array(
          'entity_type',
          'bundle',
          'deleted',
          'entity_id',
          'revision_id',
          'language',
          'delta',
          'field_user_' . $field . '_value',
              ));
      foreach ($users as $user) {
        $planetUser = db_query("SELECT * FROM planetmath_users WHERE username = :username", array(':username' => $user->name))->fetchObject();
        if ($planetUser) {
          $insert->values(array(
              'entity_type' => 'user',
              'bundle' => 'user',
              'deleted' => '0',
              'entity_id' => $user->uid,
              'revision_id' => $user->uid,
              'language' => 'und',
              'delta' => '0',
              'field_user_' . $field . '_value' => $planetUser->{$field}
          ));
        }
      }
      $insert->execute();
      unset($insert);
    }
    unset($users);
  }
}

/**
 * Migrates the corrections from the old system to the new one
 * Requires a <correction> node type and the following fields:
 *  - field_correction_article
 *  - field_correction_type
 *  - field_correction_closed
 *  - field_correction_type
 */
function migration_corrections() {
  set_time_limit(0);
  global $language;
  $count = db_query("SELECT COUNT(uid) AS corr_count FROM planetmath_corrections")->fetchObject();
  for ($i = 0; $i < $count->corr_count; $i += 50) {
    $corrections = db_query("SELECT pc.*, mo.destid1 AS dest_id, mu.destid1 AS user_id FROM planetmath_corrections pc 
            INNER JOIN migrate_map_pmobject mo ON pc.objectid = mo.sourceid1
            INNER JOIN migrate_map_pmuser mu ON pc.userid = mu.sourceid1
            ORDER BY pc.uid ASC
            LIMIT $i, 50")->fetchAll();
    foreach ($corrections as $correction) {
      $node = new stdClass();
      $node->type = 'correction';
      $node->title = $correction->title;
      $node->language = $language->language;
      $node->uid = $correction->user_id;
      node_object_prepare($node);
      $node->body[$language->language][0]['format'] = 'tex_editor';
      $node->body[$language->language][0]['value'] = $correction->data . '<br />' . $correction->comment;
      $node->field_correction_article['und'][0]['nid'] = $correction->dest_id;
      $node->field_correction_type['und'][0]['value'] = $correction->type;
      $node->field_correction_accepted['und'][0]['value'] = $correction->accepted ? 1 : 0;
      $node->field_correction_closed['und'][0]['value'] = $correction->closed ? 1 : 0;
      $node->created = strtotime($correction->filed);
      $node->changed = strtotime($correction->filed);
      $node->status = NODE_PUBLISHED;
      node_save($node);
      db_insert("migrate_map_pmcorrections")->fields(array('sourceid1' => $correction->uid, 'destid1' => $node->nid, 'needs_update' => 0, 'last_imported' => $_SERVER['REQUEST_TIME']))->execute();
      if ($node->nid) {
        $comments = db_query("SELECT *, mu.destid1 as user_id FROM planetmath_correction_comments pcm INNER JOIN migrate_map_pmuser mu ON pcm.userid = mu.sourceid1 WHERE pcm.objectid = :oid", array(':oid' => $correction->uid))->fetchAll();
        foreach ($comments as $comment) {
          try {
            $com = new stdClass();
            $com->nid = $node->nid;
            $com->cid = 0;
            $com->uid = $comment->user_id;
            $com->thread = '01/';
            $com->hostname = '127.0.0.1';
            $com->created = strtotime($comment->created);
            $com->changed = strtotime($comment->created);
            $com->status = COMMENT_PUBLISHED;
            $com->is_anonymous = 0;
            $com->language = $language->language;
            $com->subject = $comment->subject;
            $com->comment_body[LANGUAGE_NONE][0]['value'] = $comment->body;
            $com->comment_body[LANGUAGE_NONE][0]['format'] = 'tex_editor';
            comment_save($com);
            unset($com);
          } catch (Exception $e) {
            print "Couldn't retrieve comments for " . $node->nid . "\n";
          }
        }
      }
      unset($node);
    }
  }
}
