<?php

/**
 * Adds useful features for the organic groups
 * @author Alex Dumitru <m.dumitru@jacobs-university.de> 
 *
 * Ported to og-7.x-2.x-dev by Joe Corneli <holtzermann17@gmail.com>
 * and Lucas Anastasiou <holtzermann17@gmail.com>
 */

/*
 * NOTES:
 * Instead of doing db_insert
 * Maybe we should be using
 *  og_membership_save(og_membership_create($group->nid, 'user', $uid->userid));
 * and
 *  og_membership_save(og_membership_create($group->nid, 'node', $nid->objectid));
 * ...
 * But testing is still needed to see whether those functions work at all!  If
 * they work, then they are at a higher level of abstraction than database calls
 * and that is likely better for portability.
 */

define("PLANETMATH_OG_COAUTHOR_GROUP_PREFIX", "Editing Group for ");
define("PLANETMATH_OG_WW_GID", 1);

// use this to limit the places where you can create a group
define("PLANETMATH_OG_ACCEPTED_CONTENT_TYPES", serialize(array('article')));

function planetmath_og_model_getNodeEditingGroup($nid) {
  $result = db_query("SELECT om.etid, om.gid 
    FROM og_membership om 
    WHERE om.entity_type = 'node' AND om.etid = :etid", array('etid' => $nid))->fetchObject();
  if (isset($result->etid)) {
    $group = node_load($result->gid);
  } else {
    $group = false;
  }
  return $group;
}

function planetmath_og_model_getWWGroup() {
  return PLANETMATH_OG_WW_GID;
}

function planetmath_og_model_isUserGroupAdmin($uid, $group) {
  $isAdmin = false;
  if ($group->uid == $uid) {
    $isAdmin = true;
  } else {
    $countAdmin = db_query("SELECT COUNT(uid) AS count_uid FROM og_users_roles WHERE rid = 3 AND uid = :uid AND gid = :gid", array(':uid' => $uid, ':gid' => $group->nid))->fetchObject()->count_uid;
    if ($countAdmin >= 1) {
      $isAdmin = true;
    }
  }
  return $isAdmin;
}

function planetmath_og_model_isUserMemberOfGroup($uid, $group) {
  $isMember = false;
  if ($group->uid == $uid) {
    $isMember = true;
  } else {
    $countMembership = db_query("SELECT COUNT(etid) AS count_uid FROM og_membership WHERE gid = :gid AND etid = :uid AND entity_type = 'user'", array(':uid' => $uid, ':gid' => $group->nid))->fetchObject()->count_uid;
    if ($countMembership >= 1) {
      $isMember = true;
    }
  }
  return $isMember;
}

// If we're going to use 7.x-2.x-dev then this 
function planetmath_og_model_insertNodeEditingGroup($node) {
  $groupTitle = PLANETMATH_OG_COAUTHOR_GROUP_PREFIX . $node->title;

  // Just creating the node is all that needs to happen in order to make the group..
  //  (I think).
  // Though it may end up being important to set some extra field that isn't set
  // here?

  // How do we know that the user is an administrator member?bbb

  $groupNode = (object) array(
              'type' => 'group',
              'title' => $groupTitle,
              'uid' => $node->uid,
              'status' => 1,
              'comment' => 1,
              'changed' => REQUEST_TIME,
              'created' => REQUEST_TIME,
              'language' => LANGUAGE_NONE
  );
  node_save($groupNode);

  /* $gid = db_insert('og')->fields(array( */
  /*             'etid' => $groupNode->nid, */
  /*             'entity_type' => 'node', */
  /*             'label' => $groupNode->title, */
  /*             'state' => 1, */
  /*             'created' => REQUEST_TIME */
  /*         ))->execute(); */

  $gid = db_insert('og_membership')->fields(array(
      'type' => 'og_membership_type_default',
      'etid' => $node->nid,
      'entity_type' => 'node',
      'gid' => $groupNode->nid,
      'group_type' => 'node',
      'state' => 1,
      'created' => REQUEST_TIME,
      'field_name' => 'og_group_ref',
      'language' => 'en'
  ))->execute();
  return $gid;
}

function planetmath_og_model_addUserToGroup($gid, $uid, $isAdmin = false) {
  db_insert('og_membership')->fields(array(
      'type' => 'og_membership_type_default',
      'etid' => $uid,
      'entity_type' => 'user',
      'gid' => $gid,
      // THIS NEXT LINE IS IMPORTANT FOR THE 7.x-2.x-dev VERSION OF OG! 
      'group_type' => 'node',
      'state' => 1,
      'created' => REQUEST_TIME,
      // THIS NEXT LINE IS IMPORTANT FOR THE 7.x-2.x-dev VERSION OF OG! 
      'field_name' => 'og_user_group_ref',
      'language' => 'en'
  ))->execute();

  db_insert('og_users_roles')->fields(array(
      'uid' => $uid,
      'rid' => $isAdmin ? 3 : 2,
      'gid' => $gid
  ))->execute();
}

// We should extend this with the ability to create an arbitrary group
function planetmath_og_menu() {
  $items = array();
  $items['node/%/pmgroup'] = array(
      'type' => MENU_LOCAL_TASK,
      'title' => 'Co-Authors',
      'page callback' => 'planetmath_og_view_coAuthorsPage',
      'page arguments' => array(1),
      'access callback' => 'planetmath_og_access_coAuthorsPage',
      // argument to this callback duh
      'access arguments' => array(1)
  );

  $items['node/%/pmxxx'] = array(
      'type' => MENU_LOCAL_TASK,
      'title' => 'BAD Co-Authors',
      'page callback' => 'planetmath_og_view_coAuthorsPage',
      'page arguments' => array(1),
      'access callback' => 'planetmath_og_access_coAuthorsPage',
      // argument to this callback duh
      'access arguments' => array(1)
  );

  $items['planetmath_og/create-coauth-group/%'] = array(
      'type' => MENU_CALLBACK,
      'title' => 'Create CoAuthor Group',
      'page callback' => 'planetmath_og_callback_createCoAuthGroup',
      'page arguments' => array(2),
      'access arguments' => array('create group content')
  );  
  
  
  
  return $items;
}

// Called for every node view!  But filters out everything besides articles (for now)
function planetmath_og_access_coAuthorsPage($nid){
  $node = node_load($nid);
  if(in_array($node->type, unserialize(PLANETMATH_OG_ACCEPTED_CONTENT_TYPES))){
    return true;
  }
  return false;
}

function planetmath_og_view_coAuthorsPage($nid) {
  $node = node_load($nid);
  $group = planetmath_og_model_getNodeEditingGroup($node->nid);
  $page = "";
  global $user;

  if ($group === false) {
    if ($node->uid == $user->uid) {
      $page = planetmath_og_view_coAuthorsNoGroupPage($node);
    }
    else{
      $page = "No co-author group was created yet. This can only be done by the original author.";
    }
  } else {
    if (planetmath_og_model_isUserGroupAdmin($user->uid, $group)) {
      $page = planetmath_og_view_coAuthorsGroupPage($group);
    } else {
      $page = planetmath_og_view_requestInvitePage($node, $group);
    }
  }
  return $page;
}

// http://metameso.org/p/group/node/13/admin/people/add-user
function planetmath_og_view_coAuthorsGroupPage($group) {
  $links = array(
      'add-people' => l("Add co-authors", 'group/node/' . $group->nid . '/admin/people/add-user'),
      'people' => l('Manage co-authors', 'group/node/' . $group->nid . '/admin/people')
  );
  return theme('item_list', array('items' => array_values($links), 'type' => 'ul', 'options' => array()));
}

function planetmath_og_view_coAuthorsNoGroupPage($node) {
  $html = "<p>Currently, there is no co-author group associated to this one.</p>" .
          l("Create co-author group", 'planetmath_og/create-coauth-group/' . $node->nid);
  return $html;
}

function planetmath_og_callback_createCoAuthGroup($nid) {
  $node = node_load($nid);
  if ($node->nid) {
    $gid = planetmath_og_model_insertNodeEditingGroup($node);
    if ($gid) {
      drupal_set_message("The co-author group was successfully created");
    } else {
      drupal_set_message("There was an error creating the co-author group", "error");
    }
  } else {
    drupal_set_message("The group was not created because the article supplied does not exist", "error");
  }
  drupal_goto('node/' . $nid . '/pmgroup');
}

function planetmath_og_view_requestInvitePage($node, $group) {
  global $user;
  $html = "";
  if (!planetmath_og_model_isUserMemberOfGroup($user->uid, $group)) {
    $html = l("Request to join as a co-author", 'group/node/' . $group->nid . '/subscribe');
  } else {
    $html = "You are a co-author on this article.";
  }
  return $html;
}

/*
 * Implements hook_user_insert
 */

// This hook will make it so that every new user is added to the world writable group.

function planetmath_og_user_insert($edit, $account, $category) {
  $gid = planetmath_og_model_getWWGroup();
  planetmath_og_model_addUserToGroup($gid, $account->uid);
}

// We need to be able to add groups, and we need to be able to add nodes as a subroutine.
// Returns the nid of the new node
function planetmath_og_node_add_programmatic($type, $title, $uid, $body_text) {

  $node = (object) array("type"=>$type, "title"=>$title, "language"=>LANGUAGE_NONE);
  node_object_prepare($node);
  $node->uid = $uid;
  $node->body[$node->language][0]['value']   = $body_text;
  $node->body[$node->language][0]['summary'] = text_summary($body_text);
  $node->body[$node->language][0]['format']  = 'filtered_html';

  node_save($node); // After this call we'll get a nid
  return $node->nid;
}
// Test:
// node_add_programmatic('group','testing programmatic add for groups again',1,'bla bla woof woof');

// We need to be able to add groups, and we need to be able to add nodes as a subroutine.
function planetmath_og_group_add_programmatic($name,$userid,$description) {
  $etid = planetmath_og_node_add_programmatic('group', $name, $userid, $description);
  // ANOTHER DIFFERENCE FROM OLD VERSION OF THIS CODE
  return entity_load_single('node', $etid);
}

// MODIFY THE DISPLAY OF GROUPS USING A THEME

function planetmath_og_theme($existing, $type, $theme, $path) {
  $to_return = array(
	       'planetmath_group_users' => array(
						 'variables' => array('links' => array()),
						 ),
	       'planetmath_group_content' => array(
						   'variables' => array('links' => array()),
						   ),
	       );
  return $to_return;
}

function theme_planetmath_group_users($variables) {
  $return = "Members: ";
  foreach ($variables['links'] as $link) {
    $return = $return . l($link->name, 'user/' . $link->uid) . " ";
    }
    
    dd($return);
  return $return;
}

function theme_planetmath_group_content($variables) {
 dd($variables);
 $return = "Content: ";
 foreach ($variables['links'] as $link) {
   $return = $return . l($link->title, 'node/' . $link->nid) . " ";
   }
   
 dd($return);
 return $return;
}

function planetmath_og_node_view($node) {

 if($node->type == 'group'){ 

  // first select relevant information about group members

    $user_info = db_query("SELECT u.name, u.uid FROM users u INNER JOIN og_membership ON og_membership.etid = u.uid WHERE og_membership.gid = :nid AND og_membership.group_type='node' AND og_membership.entity_type = 'user' LIMIT 20;", array(':nid' => $node->nid));

    $links = array();
    foreach ($user_info as $result) {
      $links[] = $result;
    }
   
    $node->content['planetmath_group_users'] = array(
        '#markup' => '',
        '#weight' => 10,
        '#theme' => 'planetmath_group_users',
        '#links' => $links,
    );
    
    // then select relevant information about group content (nodes)

    $content_info = db_query("SELECT n.title,n.nid FROM node n INNER JOIN og_membership WHERE og_membership.gid =:nid AND og_membership.entity_type='node' AND og_membership.entity_type = 'node' AND og_membership.etid = n.nid LIMIT 20", array(':nid' => $node->nid));

   $links = array();
   foreach ($content_info as $result) {
     $links[] = $result;
   }
   
   $node->content['planetmath_group_content'] = array(
       '#markup' => '',
       '#weight' => 10,
       '#theme' => 'planetmath_group_content',
       '#links' => $links,
   );

  }

}

/**
 * Implementation of hook_form_FORM_ID_alter()
 * @param array $form
 * @param array $form_state
 * @param array $form_id 
 *
 * The purpose of this code is to adjust the form that the user is
 * presented with when editing an article, so that the "buddies list"
 * of the user is presented as the default "team" to share this article
 * with (and so that only groups that are "teams" are available as options)
 * 
 * COMMENT: This implementation may be inefficient, since we use
 * node_load()... but it does work.
 *
 * NOTE: Some later implementation would be needed to make groups show
 * up as an option to add content to when the user is not an admin (if
 * we want that).
 */

function planetmath_og_form_article_node_form_alter(&$form, &$form_state, $form_id) {
  
  global $user;

  //dd($form['og_group_ref']['und']['#options']);

  $filtered_group_list = array();

  //
  // find the 'buddy' group of this user
  //
  //dd($GLOBALS['user']);
  $buddy_group_id = get_user_buddy_group_id($GLOBALS['user']['uid']);

  if (!isset($form['og_group_ref']['und']['#default_value'][0]) || $buddy_group_id==0){
    $form['og_group_ref']['und']['#default_value'] = $buddy_group_id;
  }

  //dd($form);
  //dd('\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n');
  //dd($form_state);
  //$form['og_group_ref']['und']['#default_value'] = $buddy_group_id;
  $filtered_group_list[0]='none';

  foreach ($form['og_group_ref']['und']['#options'] as $gid=>$group_title){
    $group = node_load($gid);
    if (isset($group->field_group_subtype['und'][0]) && 
	$group->field_group_subtype['und'][0] == 'Team'){
      $filtered_group_list[$gid]=$group_title;
    }
  }

  $form['og_group_ref']['und']['#options'] = $filtered_group_list;

  //dd(node_load(23)->field_group_subtype['und'][0]);
}

// Needs to be implemented properly...
function get_user_buddy_group_id($uid){
  $gid =0;
  return $gid;
}


