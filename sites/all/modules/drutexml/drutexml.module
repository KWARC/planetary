<?php

/**
 * A module that allows new input types such as LaTeX and sTeX
 */
/**
 * A function to do a POST request to a certain $host with the $data
 * @param string $host the URL of the backend
 * @param string $data the POST data formatted as a string
 */
function do_post($host, $data){
  $session = curl_init($host);
  curl_setopt($session, CURLOPT_POST, true);
  curl_setopt($session, CURLOPT_POSTFIELDS, $data);
  curl_setopt($session, CURLOPT_HEADER, false);
  curl_setopt($session, CURLOPT_RETURNTRANSFER, true);
  $response = curl_exec($session);
  curl_close($session);
  return $response;
}


/**
 * Implements hook_help
 *
 * @param unknown_type $path
 *  Which path of the site we're using to display help
 * @param unknown_type $arg
 *  Array that holds the current path as returned from the arg() function
 */
function drutexml_help($path, $arg) {
  switch ($path) {
    case "admin/help#drutexml":
      return '<p>' . t('Allows new input methods such as LaTeX') . '</p>';
      break;
  }
}


function drutexml_info() {
  $blocks['drutexml'] = array(
    'info' => t('LaTeX filter'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Implements hook_menu().
 */
function drutexml_menu() {
  $items['drutexml'] = array(
    'title' => 'LaTeX filter implemented via LaTeXML',
    'page callback' => '_drutexml_information',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_filter_info().
 */
function drutexml_filter_info() {
  $filters['latex'] = array(
    'title' => t('LaTeX filter'),
    'description' => t('The text will be passed as LaTeX to LaTeXML daemon and then shown to the user'),
    'process callback' => '_drutexml_filter_latex_process',
    'default settings' => array(
      'latexml_url' => 'http://latexml.mathweb.org/convert',
      'latexml_preamable' => '',
    ),
    'cache' => TRUE,
    'settings callback' => '_drutexml_filter_latex_settings',
    'tips callback' => '_drutexml_filter_latex_tips',
  );
  $filters['image_sanetizer'] = array(
    'title' => t('Image Sanetizer'),
    'description' => t('Replaces images with src="some local path" to images pointing to src="sites/default/files/nodeid"'),
    'process callback' => '_drutexml_image_sanetizer',
    'cache' => false,
  );
  $filters['xhtml2html5'] = array(
    'title' => t('XHTML to HTML5 filter'),
    'description' => t('Removes namespaces'),
    'process callback' => '_drutexml_xhtml2html5',
    'cache' => false,
  );
  return $filters;
}

/**
 * @see drutexml_menu
 * Returns basic info about the filter.
 */
function _drutexml_information() {
  return t(
    "We implement here a LaTeX filter that aims at transforming the content from LaTeX
    to XHTML. To use this filter go to !link and configure the input formats.",
    array('!link' => l('admin/config/contents/formats', 'admin/config/contents/formats'))
  );
}

/**
 * Settings callback for LaTeX filter
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @param unknown_type $filter
 * @param unknown_type $format
 * @param unknown_type $defaults
 */
function _drutexml_filter_latex_settings($form, $form_state, $filter, $format, $defaults) {
  $settings['latexml_url'] = array(
    '#type' => 'textfield',
    '#title' => t('LaTeXML daemon URL'),
    '#default_value' => isset($filter->settings['latexml_url']) ? $filter->settings['latexml_url'] : $defaults['latexml_url'],
    '#description' => t('The URL of the LaTeXMl daemon.'),
  );
  $settings['latexml_preamble'] = array(
    '#type' => 'textarea',
    '#title' => t('Preamble to be used'),
    '#default_value' => isset($filter->settings['latexml_preamble']) ? $filter->settings['latexml_preamble'] : $defaults['latexml_preamble'],
    '#description' => t('The preamble to be used for the daemon.'),
  );
  $settings['latexml_reset'] = array(
    '#type' => 'submit',
    '#value' => t('Reset LaTeXML cache'),
    '#submit' => array('_drutexml_filter_reset_cache'),
  );
  return $settings;
}

function _drutexml_cache_read($md5) {
	$cache = db_select("drutexml_cache", "a")->fields('a', array("xhtml"))->condition("a.cachemd5", $md5)->execute()->fetchAll();
	if (count($cache)==0) {
		return;
	}
	return $cache[0]->xhtml;
}

function _drutexml_cache_set($md5, $xhtml) {
	db_insert("drutexml_cache")->fields(array(
		"cachemd5" => $md5,
		"xhtml" => $xhtml	
	))->execute();
}

function _drutexml_cache_clear() {
	db_delete("drutexml_cache")->execute();
}


function _drutexml_filter_reset_cache($form, &$form_state) {
	_drutexml_cache_clear();
}

/**
 * LaTeX filter process callback
 * @see drutexml_filter_info
 *
 * @param unknown_type $text
 * @param unknown_type $filter
 * @param unknown_type $format
 */
function _drutexml_filter_latex_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  $key = md5($text);
  $cache = _drutexml_cache_read($key);
  if (isset($cache)) {
  	return $cache;
  }
  
  $hasPreamble = '/^([\s\S]*)\\\\begin{document}([\s\S]*)\\\\end{document}([\s\S]*)$/';
  $m = preg_match($hasPreamble, $text, $matches);
  
  global $latex_preamble;
  if ($m > 0) {
	$preamble = $matches[1];
	$text = $matches[2];	
  } else
  if (isset($latex_preamble) && strlen($latex_preamble) > 0) {
  		$preamble = $latex_preamble;
  } else
     	$preamble = $filter->settings['latexml_preamble'];
  
  $host = isset($filter->settings['latexml_url']) ? $filter->settings['latexml_url'] : 'http://latexml.mathweb.org/convert';
  
  $data = 'profile=fragment&tex=' . urlencode($text);
  if ($preamble) { $data .= "&preamble=" . urlencode($preamble); }
  
  $content = do_post($host,$data);
  $res = json_decode($content);
  $res = trim($res->{'result'});
  $res = str_replace('m:','',$res); //stupid firefox doesn't know about namespaces in HTML ... so it's rendered badly. otherwise, uncomment next line.
  $res = str_replace('xml:','',$res); //also remove xml:id
  _drutexml_cache_set($key, $res);
  return $res;
}

/**
 * 
 * Image Sanetizer Filter
 * @param unknown_type $text
 * @param unknown_type $filter
 * @param unknown_type $format
 * @param unknown_type $langcode
 * @param unknown_type $cache
 * @param unknown_type $cache_id
 */
function _drutexml_image_sanetizer($text, $filter, $format, $langcode, $cache, $cache_id) {
	$webroot = "/webroot='([^']+)'/";
	$count = preg_match($webroot, $text, $arr, PREG_OFFSET_CAPTURE);
	if ($count == 0) // no webroot found 
		return $text;
	$webpath = url('<front>').$arr[1][0]."/";
	
	$pattern = "/<img([^>]*)src\s*=\s*[\"']([^\"'\/]+)[\"']([^>]*)>/";
	$replace = "<img$1 src='".$webpath."$2' $3>";
	$result = preg_replace($pattern, $replace, $text);
	return $result;
}


function _drutexml_xhtml2html5($text, $filter, $format, $langcode, $cache, $cache_id) {

  $text = str_replace('m:','',$text); //stupid firefox doesn't know about namespaces in HTML ... so it's rendered badly. otherwise, uncomment next line.
  $text = str_replace('xml:','',$text); //also remove xml:id
  return $text;
}

/**
 * Filter tips
 *
 * @param unknown_type $filter
 * @param unknown_type $format
 * @param unknown_type $long
 */
function _drutexml_filter_latex_tips($filter, $format, $long = FALSE) {
  if (!$long) {
    return t('<em>LaTeX</em> content replaced with XHTML');
  } else {
    return t('You can write LaTeX and you will get back rendered XHTML');
  }
}

function drutexml_node_view_alter(&$build) {
  $node = $build['#node'];
  if ($node) {
    $node->textitle = $node->title;
    $node->title = check_markup($node->title,'filtered_html',TRUE);
    drupal_set_title($node->title,PASS_THROUGH);
  }
}

function drutexml_process_node(&$vars) {
  $node = $vars['node'];
  if ($node) {
    if ((!$vars['title']) && (!isset($node->textitle)) && isset($node->title)) {
      $vars['title'] = check_markup($node->title,'filtered_html',TRUE);
    } else {
      $vars['title'] = $node->title;
    }
    drupal_set_title($node->textitle);
  }
}

function drutexml_entity_presave($entity, $type) {
	$ent = (array) $entity;
	if (isset($ent["field_preamble"]) && isset($ent["body"])) {
		$entity->body["und"][0]["preamble"] = $ent["field_preamble"]["und"][0]["value"];
	}
}

function drutexml_entity_load($entities, $type) {
	foreach ($entities as $entity) {
		$ent = (array) $entity;
		if (isset($ent["field_preamble"]) && isset($ent["body"])) {
			$entity->body["und"][0]["preamble"] = $ent["field_preamble"]["und"][0]["value"];
		}
	}
}
