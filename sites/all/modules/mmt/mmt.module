<?php
// -------------------------- API FUNCTIONS --------------------------- \\

/**
 * Initialize MMT, loads CSS and JS files and uses jobad API
 * called in mmt_node_view
 */
function mmt_initialize() {
    /* CSS */
    $mmt_path = drupal_get_path('module', 'mmt');
    $mmt_config = variable_get('mmt_config');
    $mmt_url = $mmt_config['mmturl'];  

    
    drupal_add_css($mmt_path . '/css/mmt.css', array('weight' => PHP_INT_MAX, 'every_page' => false));
    
    /* JavaScript */
    drupal_add_js('var mmtUrl = "' . $mmt_url . '";', 'inline');
    jobad_add_module($mmt_path . '/jobad/planetary-navigation.js', "kwarc.mmt.planetary.navigation");
    jobad_add_module($mmt_path . '/jobad/ontology-navigation.js', "kwarc.mmt.ontology.navigation");
    jobad_add_module($mmt_path . '/jobad/hovering.js', "kwarc.mmt.hovering");
    jobad_add_module($mmt_path . '/jobad/interactive-viewing.js', "kwarc.mmt.intvw");


    // if search enabled
    // jobad_add_module($mmt_path . '/jobad/search.js', "kwarc.mmt.search");

    // mmt js libs
    drupal_add_js($mmt_path . '/utils/mmt-html.js', 'file', array('cache' => false));
    drupal_add_js($mmt_path . '/utils/mmt-planetary.js', 'file', array('cache' => false));
    drupal_add_js($mmt_path . '/utils/mathml.js', 'file', array('cache' => false));
    
    // modules
}


/**
 * implements hook_node_view
 * initializes mmt (loads CSS and JS files) 
 * @param $node The node that is being assembled for rendering.
 * @param $view_mode The $view_mode parameter from node_view() (e.g. "full").
 * @param $langcode The language code used for rendering.
 */
function mmt_node_view($node, $view_mode, $langcode) {
  if ($view_mode != "full")
    return;
  $oaff_config = variable_get('oaff_config');
  $oaff_node_types = $oaff_config['handled_node_types'];
  if (in_array($node->type, $oaff_node_types)) {
     mmt_initialize();
  }
}

/**
 * function to get content from mmt (optionally presented with a style)
 * @param $dpath the path from where to get the content
 * @param $style the style to be used for presentation
 * @return the rendered content
 */
function mmt_get($dpath, $style = 'http://cds.omdoc.org/styles/omdoc/mathml.omdoc?html5') {
  $mmt_config = variable_get('mmt_config');
  $mmt_url = $mmt_config['mmturl'];
  $url = "$mmt_url/:mmt?get%20$dpath??%20present%20$style%20respond";
  $response = file_get_contents($url);
  return $response;
}


/**
 * function to get presentation of a document from the connected MMT instance (MMT URL set in MMT config)
 * @param $dpath the MMT URI of the document
 * @param $body the content of the document
 * @param $style the MMT style to be used for presentation
 * @return the processing result and log
 */
function mmt_present($dpath, $body, $style = 'http://cds.omdoc.org/styles/omdoc/mathml.omdoc?html5') {
  $mmt_config = variable_get('mmt_config');
  $mmt_url = $mmt_config['mmturl'];
  $url = $mmt_url . '/:planetary/getPresentation';
  $data = array('body' => $body, 'style' => $style);
  if (isset($dpath)) {
    $data['dpath'] = $dpath;
  }

  $options = array(
    'http' => array(
        'header'  => "Content-type: application/json\r\n",
        'method'  => 'POST',
        'content' => json_encode($data),
    ),
  );
  $context  = stream_context_create($options);
  $response = file_get_contents($url, false, $context);
  $result = json_decode($response, true);
  return $response;
}

/**
 * function to compile a source document with the connected MMT instance (MMT URL set in MMT config)
 * @param $dpath the MMT URI of the document
 * @param $body the content of the document
 * @param $format the source format of the document, used to select the correct MMT compiler
 * @return the processing result and log
 */
function mmt_compile($body, $dpath, $format) {
  $mmt_config = variable_get('mmt_config');
  $mmt_url = $mmt_config['mmturl'];
  $url = $mmt_url . '/:planetary/getCompiled';

  $data = array('body' => $body, 'format' => $format);
  if (isset($dpath)) {
    $data['dpath'] = $dpath;
  }

  $options = array(
    'http' => array(
      'header'  => "Content-type: application/json\r\n",
      'method'  => 'POST',        
      'content' => json_encode($data),
    ),
  );
  $context  = stream_context_create($options);
  $response = file_get_contents($url, false, $context);
  $result = json_decode($response, true); 
  return $response;
}

/**
 * gets a list of the mmt paths of all mmt theories that are included in the given one
 * i.e. all theories this one depends on 
 * e.g.  
 * mmt_get_dependencies("http://docs.omdoc.org/smglo/dgraph.en.omdoc?dgraph.en");
 *  mmt_get_dependencies("http://docs.omdoc.org/smglo/dgraph.omdoc?dgraph");
 * @param $mpath the module path (MMT URI) for which to search dependencies
 * @return an array with URIs of all modules this depends on
*/
function mmt_get_dependencies($mpath) {
  $mmt_config = variable_get('mmt_config');
  $mmt_url = $mmt_config['mmturl'];
  $url = $mmt_url . '/:query';
  $data = '<related><individual uri="'.$mpath.'"/><toobject relation="Includes"/></related>';

  $options = array(
    'http' => array(
        'header'  => "Content-type: application/xml\r\n",
        'method'  => 'POST',
        'content' => $data,
    ),
  );
  $context  = stream_context_create($options);
  $response = file_get_contents($url, false, $context);
  $xml = new SimpleXMLElement($response);
  $xmlpaths = $xml->xpath('/results/result/uri');
  $results = array();
  foreach ($xmlpaths as $xmlpath) {
    $results[] = (string)$xmlpath['path'];
  }
  return array($results); 
}

// ######################## END API FUNCTIONS ########################### \\


/**
 * Implements hook_menu()
 */
function mmt_menu() {
  $items = array();
  $items['admin/config/content/mmt'] = array(
    'title' => 'MMT configuration',
    'description' => 'Configure MMT Integration. ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mmt_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

// -------------------------- MMT Configuration ------------------------- \\


/**
 * validation function of mmt configuration form
 * @param $form the form to be validated
 * @param $form the form state, including filled in values
 */
function mmt_config_validate($form, &$form_state) {
  $mmt_url = $form_state['values']['mmt_instance_url'];
  if (trim($mmt_url) == '') {
    form_set_error('mmt_instance_url', t('MMT URL cannot be empty'));
  }
}

/**
 * submit function of the mmy configuration form
 * @param $form the form to be validated
 * @param $form the form state, including filled in values
 */
function mmt_config_submit($form, &$form_state) {
  $mmt_url = $form_state['values']['mmt_instance_url'];
  mmt_config_set($mmt_url);
}

/**
 * helper function to set mmt configuration, called by mmt_config_submit and mmt_install
 * @param $mmt_url the URL of the MMT instance connected to the OAFF
 */
function mmt_config_set($mmt_url) {
  $mmt_config = variable_get('mmt_config');
  $mmt_config['mmturl'] = $mmt_url;

  variable_set("mmt_config", $mmt_config);
}

/**
 * MMT configuration form
 * @param $form the form to be validated
 * @param $form the form state, including filled in values
 * @return the newly built form
 */
function mmt_config_form($form, &$form_state) {
  $form['mmt_instance_url'] = array(
    '#type' => 'textfield',
    '#title' => t('MMT URL'),
    '#default_value' => variable_get('mmt_instance_url', 'http://localhost:8080'),
    '#description' => t('The URL of the MMT instance to be connected with OAFF'),
  );

  $form['#validate'] = array('mmt_config_validate');
  $form['#submit'] = array('mmt_config_submit');

  return system_settings_form($form);
}
// ########################## End MMT Configuration ########################## \\



// -------------------------------- MMT Filters ------------------------------------ \\
/**
 * filter hooks for handling content formats, implements hook_filter_info()
 * declares two filters: for MMT compilation and for MMT presentation
 */
function mmt_filter_info() {
  $filters = array();
  $filters['mmt-presentation'] = array(
    'title' => t('MMT Presentation filter'),
    'description' => t('The text will be rendered by MMT using a presentation style'),
    'process callback' => 'mmt_filter_presentation_process',
    'default settings' => array(
      'mmt_style' => 'http://cds.omdoc.org/styles/omdoc/mathml.omdoc?html5',
    ),
    'settings callback' => 'mmt_filter_presentation_settings',
  );
  $filters['mmt-compilation'] = array(
    'title' => t('MMT Compilation filter'),
    'description' => t('The text will be compiled by MMT to return MMT-OMDoc'),
    'process callback' => 'mmt_filter_compilation_process',
    'default settings' => array(
      'mmt_format' => 'mmt',
    ),
    'settings callback' => 'mmt_filter_compilation_settings',
  );

  return $filters;
}

/**
 * Processing function for the MMT presentation filter, implements callback_filter_process
 * @param $text the text string to be filtered
 * @param $filter the filter object containing settings for the given format
 * @param $format The text format object assigned to the text to be filtered.
 * @param $langcode The language code of the text to be filtered
 * @param $cache A Boolean indicating whether the filtered text is going to be cached
 * @param $cache_id The ID of the filtered text, if $cache is TRUE
 * @return the presentation result
 */
function mmt_filter_presentation_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  global $filter_context;
  global $filter_debug;
  
  if (isset($filter_context['failed']) && $filter_context['failed'] == "true") { // failed already
    return $text;
  }

  if (!isset($filter_context['source'])) { // this is the first filter
    $filter_context['source'] = $text;
  }
  
  $fpath = $filter_context['mmt']['location'];
  $dpath = oaff_get_path_info($fpath)['dpath'];
  $style = $filter->settings['mmt_style'];
  if ($text == "") { // no source => we get what is currently already in MMT ( node type probably virtdoc)
    $response = mmt_get($dpath, $style);
    return $response;
  } else {
    $response = mmt_present($dpath, $text, $style);
    if ($response == "") {
      drupal_set_message('Cannot connect to MMT instance, is MMT running?', 'error');
      $filter_context['failed'] = true;    
      return $text;
    }
    $result = json_decode($response, true);
    $filter_context['status']['mmt_pres'] = $result['status'];
    if ($result['status']['conversion'] != 0) { // compilation failed
      $filter_context['failed'] = true;
    }
    return $result['content'];
  } 
}

/**
 * Processing function for the MMT compilation filter, implements callback_filter_process
 * @param $text the text string to be filtered
 * @param $filter the filter object containing settings for the given format
 * @param $format The text format object assigned to the text to be filtered.
 * @param $langcode The language code of the text to be filtered
 * @param $cache A Boolean indicating whether the filtered text is going to be cached
 * @param $cache_id The ID of the filtered text, if $cache is TRUE
 * @return the compilation result
 */
function mmt_filter_compilation_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  global $filter_debug;
  global $filter_context;

  if (isset($filter_context['failed']) && $filter_context['failed'] == "true") { // failed already
    return $text;
  }

  if (!isset($filter_context['source'])) { // this is the first filter
    $filter_context['source'] = $text;
  }

  $fpath = $filter_context['mmt']['location'];
  $dpath = oaff_get_path_info($fpath)['dpath'];
  $format = $filter->settings['mmt_format'];
  $response = mmt_compile($text, $dpath, $format);

  if ($response == "") {
    drupal_set_message('Cannot connect to MMT instance, is MMT running?', 'error');
    $filter_context['failed'] = true;    
    return $text;
  }
  $result = json_decode($response, true);
  $filter_context['status']['mmt_comp'] = $result['status'];
  if ($result['status']['conversion'] != 0) {
    $filter_context['failed'] = true;
  }
  return $result['content'];
}

/**
 * settings function for the MMT presentation filter, implements callback_filter_settings
 * @param $form The prepopulated form array of the filter administration form
 * @param $form_state The state of the (entire) configuration form
 * @param $filter The filter object containing the current settings for the given format, in $filter->settings
 * @param $format The format object being configured
 * @param $defaults The default settings for the filter, as defined in 'default settings' in hook_filter_info(). These should be combined with $filter->settings to define the form element defaults
 * @param $filters The complete list of filter objects that are enabled for the given format
 * @return an array of settings
 */
function mmt_filter_presentation_settings($form, $form_state, $filter, $format, $defaults) {
  $settings = array();
  $settings['mmt_style'] = array(
    '#type' => 'textfield',
    '#title' => t('MMT Presentation Style'),
    '#default_value' => isset($filter->settings['mmt_style']) ? $filter->settings['mmt_style'] : $defaults['mmt_style'],
    '#description' => t('The URI or name of the style used by MMT to generate presentation for MMT/OMDoc documents'),
  );
  return $settings;
}

/**
 * settings function for the MMT compilation filter, implements callback_filter_settings
 * @param $form The prepopulated form array of the filter administration form
 * @param $form_state The state of the (entire) configuration form
 * @param $filter The filter object containing the current settings for the given format, in $filter->settings
 * @param $format The format object being configured
 * @param $defaults The default settings for the filter, as defined in 'default settings' in hook_filter_info(). These should be combined with $filter->settings to define the form element defaults
 * @param $filters The complete list of filter objects that are enabled for the given format
 * @return an array of settings
 */
function mmt_filter_compilation_settings($form, $form_state, $filter, $format, $defaults) {
  $settings = array();
  $settings['mmt_format'] = array(
    '#type' => 'textfield',
    '#title' => t('Input Format for MMT to compile'),
    '#default_value' => isset($filter->settings['mmt_format']) ? $filter->settings['mmt_format'] : $defaults['mmt_format'],
    '#description' => t('The format of the text sent to MMT to be compiled into MMT/OMDoc'),
  );
  return $settings;
}
// ############################# End MMT Filters #################################### \\



// ------------------------------ Other Hooks --------------------------------- \\
/**
 * implements hook_form_alter, adds filter context
 * @param $form Nested array of form elements that comprise the form.
 * @param $form_state A keyed array containing the current state of the form. 
 * @param $form_id String representing the name of the form itself. 
 */
function mmt_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'mmtdoc_node_form') { 
    if (array_key_exists('nid', $form_state['node'])) { // editing existing node
       $location = $form_state['node']->field_external['und']['0']['path']; 
       $path_info = oaff_get_path_info($location);
       global $filter_context;
       $filter_context = array();
       $filter_context['mmt'] = $path_info;
    }
  }
}
// ############################## End Other Hooks ############################ #

// ----------------------------- MMT Formatter -------------------------------- \\

/**
 * implements hook_field_formatter_info, declares the formatter types implemented 
 * by this module.
 * Currently:  
 *   'mmt_formatter' which formats mmt content 
 */
function mmt_field_formatter_info() {
   return array(
    'mmt_formatter' => array(
      'label' => t('Formatter of MMT content'),
      'field types' => array('vfs_file'),
    ),
  );
}
/**
 * implements hook_filed_formatter view, 
 * @param $entity_type The type of $entity
 * @param $entity The entity being displayed
 * @param $field The field structure
 * @param $instance The field instance
 * @param $langcode The language associated with $items
 * @param $items Array of values for this field
 * @param $display The display settings to use, as found in the 'display' entry of instance definitions
 */
function mmt_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  
  switch ($display['type']) {
    case 'mmt_formatter':
      $lang = $entity->language;
      foreach ($items as $delta => $item) {
        $location = $item['path'];
        global $filter_context;
        $filter_context = array();
        $filter_context['mmt']['location'] = $location;
        $pathinfo = oaff_get_path_info($location);
        $exporter = "planetary";
        if ($entity->type == 'mmtdoc') { //there (might be) no source
          $content = "";
          $html_filename = $pathinfo['module'] . '.html';
          $html_location = oaff_join_path(array($pathinfo['group'], $pathinfo['archive'], 'export/html/narration', $pathinfo['rel_parent'], $html_filename));           
        } else if ($entity->type == "oaff_virtdoc") { // there is no source
          $content = "";
          $html_location = oaff_join_path(array($pathinfo['group'], $pathinfo['archive'], 'export/planetary-headers/narration', $pathinfo['rel_parent'], '.html'));
        } else {
          $content = planetary_repo_load_file($location);
          $html_filename = $pathinfo['module'] . '.html';
          $html_location = oaff_join_path(array($pathinfo['group'], $pathinfo['archive'], 'export/planetary/narration', $pathinfo['rel_parent'], $html_filename));
        }
        global $filter_debug;
        $filter_debug = array();
        $mtime = planetary_repo_stat_file($location)['mtime'];
        $last_ran_time = oaff_get_mtime($entity->nid);

        if ($last_ran_time == $mtime && planetary_repo_stat_file($html_location) != null) {
          $markup = planetary_repo_load_file($html_location);
        } else {
          $markup = check_markup($content, $item['filter'], $lang);
          if (!isset($filter_context['failed']) || !$filter_context['failed']) {
            oaff_set_mtime($entity->nid, $mtime); 
            $html_parent = pathinfo($html_location)['dirname'];
            if (planetary_repo_stat_file($html_parent) != null) {
              planetary_repo_save_file($html_location, $markup);
            } // TODO else create parents
          }
        }
        $element[$delta] = array(
          "#type" => "container",
          '#attributes' => array(
            'class' => array('contextual-links-region'),
          ),
          "context_links" => array(
            "#type" => "contextual_links",
            "#contextual_links" => $filter_debug
          ),
          "content" => array(
            '#markup' => $markup,
          )
        );
      }
      break;
    }
  return $element;
}

// ############################### End MMT Formatter ################################ \\
                                                 